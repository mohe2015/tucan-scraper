name: Rust

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  attestations: write
  actions: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # TODO also convert to nix
  check-fmt:
    runs-on: ubuntu-24.04
    steps:
    - uses: swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    - uses: actions/checkout@v4
    - run: rustup install nightly-2024-09-10
    - run: rustup component add --toolchain nightly-2024-09-10 rustc-dev llvm-tools-preview
    - run: cargo +nightly-2024-09-10 install --git https://github.com/tucant/rustfmt --branch html-extractor-formatting rustfmt-nightly --force
    - run: cargo +nightly-2024-09-10 fmt --check
    - run: cargo install --git https://github.com/mohe2015/yew-fmt --branch patch-1
    - run: RUSTFMT=~/.cargo/bin/yew-fmt cargo fmt --check

  build:
    runs-on: ubuntu-24.04
    steps:
    - uses: nixbuild/nix-quick-install-action@v27
    - name: Restore and cache Nix store
      uses: nix-community/cache-nix-action@v5
      with:
        # restore and save a cache using this key
        primary-key: nix-${{ runner.os }}
        # if there's no cache hit, restore a cache by this prefix
        restore-prefixes-first-match: nix-${{ runner.os }}-
        # collect garbage until Nix store size (in bytes) is at most this number
        # before trying to save a new cache
        gc-max-store-size-linux: 1073741824
        # do purge caches
        purge: true
        # purge all versions of the cache
        purge-prefixes: cache-${{ runner.os }}-
        # created more than this number of seconds ago relative to the start of the `Post Restore` phase
        purge-created: 0
        # except the version with the `primary-key`, if it exists
        purge-primary-key: never
    - uses: actions/checkout@v4
    - run: nix --extra-experimental-features nix-command --extra-experimental-features flakes build .#extension
    - run: cp result tucant-extension.zip
    - uses: actions/attest-build-provenance@v1
      with:
        subject-path: tucant-extension.zip
    - uses: actions/upload-artifact@v4
      with:
        name: tucant-extension
        path: tucant-extension.zip
  
  source-code:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - run: |
        DIRECTORY=$(mktemp -d)
        zip -r $DIRECTORY/tucant-extension-source.zip *
        mv $DIRECTORY/tucant-extension-source.zip tucant-extension-source.zip
    - uses: actions/attest-build-provenance@v1
      with:
        subject-path: tucant-extension-source.zip
    - uses: actions/upload-artifact@v4
      with:
        name: tucant-extension-source
        path: tucant-extension-source.zip

  reproducibility:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        attempt: [1, 2]
    steps:
    - uses: nixbuild/nix-quick-install-action@v27
    - uses: actions/checkout@v4
    - run: nix --extra-experimental-features nix-command --extra-experimental-features flakes build .#extension
    - run: cp result tucant-extension.zip
    - uses: actions/attest-build-provenance@v1
      with:
        subject-path: tucant-extension.zip
    - uses: actions/upload-artifact@v4
      with:
        name: tucant-extension-${{ matrix.attempt }}
        path: tucant-extension.zip

  reproducibility-check:
    runs-on: ubuntu-24.04
    needs: [reproducibility]
    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: tucant-extension-*
    - run: ls -la -R .
    - run: diff tucant-extension-1/tucant-extension.zip tucant-extension-2/tucant-extension.zip