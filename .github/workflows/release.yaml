name: Release extension

on: workflow_dispatch

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
    - uses: nixbuild/nix-quick-install-action@v27
    - name: Restore and cache Nix store
      uses: nix-community/cache-nix-action@v5
      with:
        # restore and save a cache using this key
        primary-key: nix-${{ runner.os }}
        # if there's no cache hit, restore a cache by this prefix
        restore-prefixes-first-match: nix-${{ runner.os }}-
        # collect garbage until Nix store size (in bytes) is at most this number
        # before trying to save a new cache
        gc-max-store-size-linux: 1073741824
        # do purge caches
        purge: true
        # purge all versions of the cache
        purge-prefixes: cache-${{ runner.os }}-
        # created more than this number of seconds ago relative to the start of the `Post Restore` phase
        purge-created: 0
        # except the version with the `primary-key`, if it exists
        purge-primary-key: never
    - uses: actions/checkout@v4
    - name: Extract version
      id: version
      run: echo "VERSION=$(jq -r .version tucant-extension/manifest.json)" >> "$GITHUB_OUTPUT"
    - run: nix --extra-experimental-features nix-command --extra-experimental-features flakes build .#extension-unpacked .#extension-source
    - env:
        CHROMIUM_EXTENSION_SIGNING_KEY: ${{ secrets.CHROMIUM_EXTENSION_SIGNING_KEY }}
      run: |
        echo $CHROMIUM_EXTENSION_SIGNING_KEY | base64 --decode > cert.pem
    - run: chromium --pack-extension=result/ --pack-extension-key=cert.pem
    - run: mv result.crx tucant-extension-${{ steps.version.outputs.VERSION }}.crx
    - uses: actions/upload-artifact@v4
      with:
        name: tucant-extension-${{ steps.version.outputs.VERSION }}
        path: tucant-extension-${{ steps.version.outputs.VERSION }}.crx
    - run: cp -r result/. result-chmod/
    - run: chmod -R ug+rw result-chmod/
    - run: cp result-1 result-source-code.zip
    - env:
        # https://addons.mozilla.org/en-US/developers/addon/api/key/
        WEB_EXT_API_KEY: ${{ secrets.WEB_EXT_API_KEY }}
        WEB_EXT_API_SECRET: ${{ secrets.WEB_EXT_API_SECRET }}
      run: nix --extra-experimental-features nix-command --extra-experimental-features flakes run nixpkgs#web-ext -- sign --channel unlisted --source-dir result-chmod/ --upload-source-code result-source-code.zip
    - run: cp web-ext-artifacts/tucant-${{ steps.version.outputs.VERSION }}.xpi tucant-extension-${{ steps.version.outputs.VERSION }}.xpi
    - uses: actions/upload-artifact@v4
      with:
        name: tucant-extension-${{ steps.version.outputs.VERSION }}
        path: tucant-extension-${{ steps.version.outputs.VERSION }}.xpi
    - run: |
        mkdir pages
        cp tucant-${{ steps.version.outputs.VERSION }}.crx pages/
        cp tucant-extension-${{ steps.version.outputs.VERSION }}.xpi pages/
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Upload entire repository
        path: '.'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-24.04
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4