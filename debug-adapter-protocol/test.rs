# [doc = "Base Protocol"] # [doc = "Base class of requests, responses, and events."] # [doc = "Sequence number of the message (also known as message ID). The `seq` for the first message sent by a client or debug adapter is 1, and for each subsequent message is 1 greater than the previous message sent by that actor. `seq` can be used to order requests, responses, and events, and to associate requests with their corresponding responses. For protocol messages of type `request` the sequence number can be used to cancel the request."] pub type r#ProtocolMessage_seq = i32 ; # [doc = "Message type."] pub type r#ProtocolMessage_type = String ; pub struct r#ProtocolMessage { pub r#seq : r#ProtocolMessage_seq , r#type : r#ProtocolMessage_type } pub type r#Request_0 = r#ProtocolMessage ; # [doc = "A client or debug adapter initiated request."] pub type r#Request_1_type = String ; # [doc = "The command to execute."] pub type r#Request_1_command = String ; # [doc = "Object containing arguments for the command."] pub enum r#Request_1_arguments { } pub struct r#Request_1 { pub r#type : r#Request_1_type , r#command : r#Request_1_command , r#arguments : r#Request_1_arguments } pub struct r#Request { pub r#_0 : r#Request_0 , r#_1 : r#Request_1 } pub type r#Event_0 = r#ProtocolMessage ; # [doc = "A debug adapter initiated event."] pub type r#Event_1_type = String ; # [doc = "Type of event."] pub type r#Event_1_event = String ; # [doc = "Event-specific information."] pub enum r#Event_1_body { } pub struct r#Event_1 { pub r#type : r#Event_1_type , r#event : r#Event_1_event , r#body : r#Event_1_body } pub struct r#Event { pub r#_0 : r#Event_0 , r#_1 : r#Event_1 } pub type r#Response_0 = r#ProtocolMessage ; # [doc = "Response for a request."] pub type r#Response_1_type = String ; # [doc = "Sequence number of the corresponding request."] pub type r#Response_1_request_seq = i32 ; # [doc = "Outcome of the request.\nIf true, the request was successful and the `body` attribute may contain the result of the request.\nIf the value is false, the attribute `message` contains the error in short form and the `body` may contain additional information (see `ErrorResponse.body.error`)."] pub type r#Response_1_success = bool ; # [doc = "The command requested."] pub type r#Response_1_command = String ; # [doc = "Contains the raw error in short form if `success` is false.\nThis raw error might be interpreted by the client and is not shown in the UI.\nSome predefined values exist."] pub type r#Response_1_message = String ; # [doc = "Contains request result if success is true and error details if success is false."] pub enum r#Response_1_body { } pub struct r#Response_1 { pub r#type : r#Response_1_type , r#request_seq : r#Response_1_request_seq , r#success : r#Response_1_success , r#command : r#Response_1_command , r#message : r#Response_1_message , r#body : r#Response_1_body } pub struct r#Response { pub r#_0 : r#Response_0 , r#_1 : r#Response_1 } pub type r#ErrorResponse_0 = r#Response ; # [doc = "On error (whenever `success` is false), the body can provide more details."] # [doc = "A structured error message."] pub type r#ErrorResponse_1_body_error = r#Message ; pub struct r#ErrorResponse_1_body { pub r#error : r#ErrorResponse_1_body_error } pub struct r#ErrorResponse_1 { pub r#body : r#ErrorResponse_1_body } pub struct r#ErrorResponse { pub r#_0 : r#ErrorResponse_0 , r#_1 : r#ErrorResponse_1 } pub type r#CancelRequest_0 = r#Request ; # [doc = "The `cancel` request is used by the client in two situations:\n- to indicate that it is no longer interested in the result produced by a specific request issued earlier\n- to cancel a progress sequence. Clients should only call this request if the corresponding capability `supportsCancelRequest` is true.\nThis request has a hint characteristic: a debug adapter can only be expected to make a 'best effort' in honoring this request but there are no guarantees.\nThe `cancel` request may return an error if it could not cancel an operation but a client should refrain from presenting this error to end users.\nThe request that got cancelled still needs to send a response back. This can either be a normal result (`success` attribute true) or an error response (`success` attribute false and the `message` set to `cancelled`).\nReturning partial results from a cancelled request is possible but please note that a client has no generic way for detecting that a response is partial or not.\nThe progress that got cancelled still needs to send a `progressEnd` event back.\n A client should not assume that progress just got cancelled after sending the `cancel` request."] pub type r#CancelRequest_1_command = String ; pub type r#CancelRequest_1_arguments = r#CancelArguments ; pub struct r#CancelRequest_1 { pub r#command : r#CancelRequest_1_command , r#arguments : r#CancelRequest_1_arguments } pub struct r#CancelRequest { pub r#_0 : r#CancelRequest_0 , r#_1 : r#CancelRequest_1 } # [doc = "Arguments for `cancel` request."] # [doc = "The ID (attribute `seq`) of the request to cancel. If missing no request is cancelled.\nBoth a `requestId` and a `progressId` can be specified in one request."] pub type r#CancelArguments_requestId = i32 ; # [doc = "The ID (attribute `progressId`) of the progress to cancel. If missing no progress is cancelled.\nBoth a `requestId` and a `progressId` can be specified in one request."] pub type r#CancelArguments_progressId = String ; pub struct r#CancelArguments { pub r#requestId : r#CancelArguments_requestId , r#progressId : r#CancelArguments_progressId } pub type r#CancelResponse_0 = r#Response ; # [doc = "Response to `cancel` request. This is just an acknowledgement, so no body field is required."] pub struct r#CancelResponse_1 { pub } pub struct r#CancelResponse { pub r#_0 : r#CancelResponse_0 , r#_1 : r#CancelResponse_1 } pub type r#InitializedEvent_0 = r#Event ; # [doc = "Events"] # [doc = "This event indicates that the debug adapter is ready to accept configuration requests (e.g. `setBreakpoints`, `setExceptionBreakpoints`).\nA debug adapter is expected to send this event when it is ready to accept configuration requests (but not before the `initialize` request has finished).\nThe sequence of events/requests is as follows:\n- adapters sends `initialized` event (after the `initialize` request has returned)\n- client sends zero or more `setBreakpoints` requests\n- client sends one `setFunctionBreakpoints` request (if corresponding capability `supportsFunctionBreakpoints` is true)\n- client sends a `setExceptionBreakpoints` request if one or more `exceptionBreakpointFilters` have been defined (or if `supportsConfigurationDoneRequest` is not true)\n- client sends other future configuration requests\n- client sends one `configurationDone` request to indicate the end of the configuration."] pub type r#InitializedEvent_1_event = String ; pub struct r#InitializedEvent_1 { pub r#event : r#InitializedEvent_1_event } pub struct r#InitializedEvent { pub r#_0 : r#InitializedEvent_0 , r#_1 : r#InitializedEvent_1 } pub type r#StoppedEvent_0 = r#Event ; # [doc = "The event indicates that the execution of the debuggee has stopped due to some condition.\nThis can be caused by a breakpoint previously set, a stepping request has completed, by executing a debugger statement etc."] pub type r#StoppedEvent_1_event = String ; # [doc = "The reason for the event.\nFor backward compatibility this string is shown in the UI if the `description` attribute is missing (but it must not be translated)."] pub type r#StoppedEvent_1_body_reason = String ; # [doc = "The full reason for the event, e.g. 'Paused on exception'. This string is shown in the UI as is and can be translated."] pub type r#StoppedEvent_1_body_description = String ; # [doc = "The thread which was stopped."] pub type r#StoppedEvent_1_body_threadId = i32 ; # [doc = "A value of true hints to the client that this event should not change the focus."] pub type r#StoppedEvent_1_body_preserveFocusHint = bool ; # [doc = "Additional information. E.g. if reason is `exception`, text contains the exception name. This string is shown in the UI."] pub type r#StoppedEvent_1_body_text = String ; # [doc = "If `allThreadsStopped` is true, a debug adapter can announce that all threads have stopped.\n- The client should use this information to enable that all threads can be expanded to access their stacktraces.\n- If the attribute is missing or false, only the thread with the given `threadId` can be expanded."] pub type r#StoppedEvent_1_body_allThreadsStopped = bool ; # [doc = "Ids of the breakpoints that triggered the event. In most cases there is only a single breakpoint but here are some examples for multiple breakpoints:\n- Different types of breakpoints map to the same location.\n- Multiple source breakpoints get collapsed to the same instruction by the compiler/runtime.\n- Multiple function breakpoints with different function names map to the same location."] pub type r#StoppedEvent_1_body_hitBreakpointIds_array = i32 ; pub type r#StoppedEvent_1_body_hitBreakpointIds = Vec < r#StoppedEvent_1_body_hitBreakpointIds_array > ; pub struct r#StoppedEvent_1_body { pub r#reason : r#StoppedEvent_1_body_reason , r#description : r#StoppedEvent_1_body_description , r#threadId : r#StoppedEvent_1_body_threadId , r#preserveFocusHint : r#StoppedEvent_1_body_preserveFocusHint , r#text : r#StoppedEvent_1_body_text , r#allThreadsStopped : r#StoppedEvent_1_body_allThreadsStopped , r#hitBreakpointIds : r#StoppedEvent_1_body_hitBreakpointIds } pub struct r#StoppedEvent_1 { pub r#event : r#StoppedEvent_1_event , r#body : r#StoppedEvent_1_body } pub struct r#StoppedEvent { pub r#_0 : r#StoppedEvent_0 , r#_1 : r#StoppedEvent_1 } pub type r#ContinuedEvent_0 = r#Event ; # [doc = "The event indicates that the execution of the debuggee has continued.\nPlease note: a debug adapter is not expected to send this event in response to a request that implies that execution continues, e.g. `launch` or `continue`.\nIt is only necessary to send a `continued` event if there was no previous request that implied this."] pub type r#ContinuedEvent_1_event = String ; # [doc = "The thread which was continued."] pub type r#ContinuedEvent_1_body_threadId = i32 ; # [doc = "If `allThreadsContinued` is true, a debug adapter can announce that all threads have continued."] pub type r#ContinuedEvent_1_body_allThreadsContinued = bool ; pub struct r#ContinuedEvent_1_body { pub r#threadId : r#ContinuedEvent_1_body_threadId , r#allThreadsContinued : r#ContinuedEvent_1_body_allThreadsContinued } pub struct r#ContinuedEvent_1 { pub r#event : r#ContinuedEvent_1_event , r#body : r#ContinuedEvent_1_body } pub struct r#ContinuedEvent { pub r#_0 : r#ContinuedEvent_0 , r#_1 : r#ContinuedEvent_1 } pub type r#ExitedEvent_0 = r#Event ; # [doc = "The event indicates that the debuggee has exited and returns its exit code."] pub type r#ExitedEvent_1_event = String ; # [doc = "The exit code returned from the debuggee."] pub type r#ExitedEvent_1_body_exitCode = i32 ; pub struct r#ExitedEvent_1_body { pub r#exitCode : r#ExitedEvent_1_body_exitCode } pub struct r#ExitedEvent_1 { pub r#event : r#ExitedEvent_1_event , r#body : r#ExitedEvent_1_body } pub struct r#ExitedEvent { pub r#_0 : r#ExitedEvent_0 , r#_1 : r#ExitedEvent_1 } pub type r#TerminatedEvent_0 = r#Event ; # [doc = "The event indicates that debugging of the debuggee has terminated. This does **not** mean that the debuggee itself has exited."] pub type r#TerminatedEvent_1_event = String ; # [doc = "A debug adapter may set `restart` to true (or to an arbitrary object) to request that the client restarts the session.\nThe value is not interpreted by the client and passed unmodified as an attribute `__restart` to the `launch` and `attach` requests."] pub enum r#TerminatedEvent_1_body_restart { } pub struct r#TerminatedEvent_1_body { pub r#restart : r#TerminatedEvent_1_body_restart } pub struct r#TerminatedEvent_1 { pub r#event : r#TerminatedEvent_1_event , r#body : r#TerminatedEvent_1_body } pub struct r#TerminatedEvent { pub r#_0 : r#TerminatedEvent_0 , r#_1 : r#TerminatedEvent_1 } pub type r#ThreadEvent_0 = r#Event ; # [doc = "The event indicates that a thread has started or exited."] pub type r#ThreadEvent_1_event = String ; # [doc = "The reason for the event."] pub type r#ThreadEvent_1_body_reason = String ; # [doc = "The identifier of the thread."] pub type r#ThreadEvent_1_body_threadId = i32 ; pub struct r#ThreadEvent_1_body { pub r#reason : r#ThreadEvent_1_body_reason , r#threadId : r#ThreadEvent_1_body_threadId } pub struct r#ThreadEvent_1 { pub r#event : r#ThreadEvent_1_event , r#body : r#ThreadEvent_1_body } pub struct r#ThreadEvent { pub r#_0 : r#ThreadEvent_0 , r#_1 : r#ThreadEvent_1 } pub type r#OutputEvent_0 = r#Event ; # [doc = "The event indicates that the target has produced some output."] pub type r#OutputEvent_1_event = String ; # [doc = "The output category. If not specified or if the category is not understood by the client, `console` is assumed."] pub type r#OutputEvent_1_body_category = String ; # [doc = "The output to report."] pub type r#OutputEvent_1_body_output = String ; # [doc = "Support for keeping an output log organized by grouping related messages."] pub type r#OutputEvent_1_body_group = String ; # [doc = "If an attribute `variablesReference` exists and its value is > 0, the output contains objects which can be retrieved by passing `variablesReference` to the `variables` request as long as execution remains suspended. See 'Lifetime of Object References' in the Overview section for details."] pub type r#OutputEvent_1_body_variablesReference = i32 ; # [doc = "The source location where the output was produced."] pub type r#OutputEvent_1_body_source = r#Source ; # [doc = "The source location's line where the output was produced."] pub type r#OutputEvent_1_body_line = i32 ; # [doc = "The position in `line` where the output was produced. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#OutputEvent_1_body_column = i32 ; # [doc = "Additional data to report. For the `telemetry` category the data is sent to telemetry, for the other categories the data is shown in JSON format."] pub enum r#OutputEvent_1_body_data { } pub struct r#OutputEvent_1_body { pub r#category : r#OutputEvent_1_body_category , r#output : r#OutputEvent_1_body_output , r#group : r#OutputEvent_1_body_group , r#variablesReference : r#OutputEvent_1_body_variablesReference , r#source : r#OutputEvent_1_body_source , r#line : r#OutputEvent_1_body_line , r#column : r#OutputEvent_1_body_column , r#data : r#OutputEvent_1_body_data } pub struct r#OutputEvent_1 { pub r#event : r#OutputEvent_1_event , r#body : r#OutputEvent_1_body } pub struct r#OutputEvent { pub r#_0 : r#OutputEvent_0 , r#_1 : r#OutputEvent_1 } pub type r#BreakpointEvent_0 = r#Event ; # [doc = "The event indicates that some information about a breakpoint has changed."] pub type r#BreakpointEvent_1_event = String ; # [doc = "The reason for the event."] pub type r#BreakpointEvent_1_body_reason = String ; # [doc = "The `id` attribute is used to find the target breakpoint, the other attributes are used as the new values."] pub type r#BreakpointEvent_1_body_breakpoint = r#Breakpoint ; pub struct r#BreakpointEvent_1_body { pub r#reason : r#BreakpointEvent_1_body_reason , r#breakpoint : r#BreakpointEvent_1_body_breakpoint } pub struct r#BreakpointEvent_1 { pub r#event : r#BreakpointEvent_1_event , r#body : r#BreakpointEvent_1_body } pub struct r#BreakpointEvent { pub r#_0 : r#BreakpointEvent_0 , r#_1 : r#BreakpointEvent_1 } pub type r#ModuleEvent_0 = r#Event ; # [doc = "The event indicates that some information about a module has changed."] pub type r#ModuleEvent_1_event = String ; # [doc = "The reason for the event."] pub type r#ModuleEvent_1_body_reason = String ; # [doc = "The new, changed, or removed module. In case of `removed` only the module id is used."] pub type r#ModuleEvent_1_body_module = r#Module ; pub struct r#ModuleEvent_1_body { pub r#reason : r#ModuleEvent_1_body_reason , r#module : r#ModuleEvent_1_body_module } pub struct r#ModuleEvent_1 { pub r#event : r#ModuleEvent_1_event , r#body : r#ModuleEvent_1_body } pub struct r#ModuleEvent { pub r#_0 : r#ModuleEvent_0 , r#_1 : r#ModuleEvent_1 } pub type r#LoadedSourceEvent_0 = r#Event ; # [doc = "The event indicates that some source has been added, changed, or removed from the set of all loaded sources."] pub type r#LoadedSourceEvent_1_event = String ; # [doc = "The reason for the event."] pub type r#LoadedSourceEvent_1_body_reason = String ; # [doc = "The new, changed, or removed source."] pub type r#LoadedSourceEvent_1_body_source = r#Source ; pub struct r#LoadedSourceEvent_1_body { pub r#reason : r#LoadedSourceEvent_1_body_reason , r#source : r#LoadedSourceEvent_1_body_source } pub struct r#LoadedSourceEvent_1 { pub r#event : r#LoadedSourceEvent_1_event , r#body : r#LoadedSourceEvent_1_body } pub struct r#LoadedSourceEvent { pub r#_0 : r#LoadedSourceEvent_0 , r#_1 : r#LoadedSourceEvent_1 } pub type r#ProcessEvent_0 = r#Event ; # [doc = "The event indicates that the debugger has begun debugging a new process. Either one that it has launched, or one that it has attached to."] pub type r#ProcessEvent_1_event = String ; # [doc = "The logical name of the process. This is usually the full path to process's executable file. Example: /home/example/myproj/program.js."] pub type r#ProcessEvent_1_body_name = String ; # [doc = "The system process id of the debugged process. This property is missing for non-system processes."] pub type r#ProcessEvent_1_body_systemProcessId = i32 ; # [doc = "If true, the process is running on the same computer as the debug adapter."] pub type r#ProcessEvent_1_body_isLocalProcess = bool ; # [doc = "Describes how the debug engine started debugging this process."] pub type r#ProcessEvent_1_body_startMethod = String ; # [doc = "The size of a pointer or address for this process, in bits. This value may be used by clients when formatting addresses for display."] pub type r#ProcessEvent_1_body_pointerSize = i32 ; pub struct r#ProcessEvent_1_body { pub r#name : r#ProcessEvent_1_body_name , r#systemProcessId : r#ProcessEvent_1_body_systemProcessId , r#isLocalProcess : r#ProcessEvent_1_body_isLocalProcess , r#startMethod : r#ProcessEvent_1_body_startMethod , r#pointerSize : r#ProcessEvent_1_body_pointerSize } pub struct r#ProcessEvent_1 { pub r#event : r#ProcessEvent_1_event , r#body : r#ProcessEvent_1_body } pub struct r#ProcessEvent { pub r#_0 : r#ProcessEvent_0 , r#_1 : r#ProcessEvent_1 } pub type r#CapabilitiesEvent_0 = r#Event ; # [doc = "The event indicates that one or more capabilities have changed.\nSince the capabilities are dependent on the client and its UI, it might not be possible to change that at random times (or too late).\nConsequently this event has a hint characteristic: a client can only be expected to make a 'best effort' in honoring individual capabilities but there are no guarantees.\nOnly changed capabilities need to be included, all other capabilities keep their values."] pub type r#CapabilitiesEvent_1_event = String ; # [doc = "The set of updated capabilities."] pub type r#CapabilitiesEvent_1_body_capabilities = r#Capabilities ; pub struct r#CapabilitiesEvent_1_body { pub r#capabilities : r#CapabilitiesEvent_1_body_capabilities } pub struct r#CapabilitiesEvent_1 { pub r#event : r#CapabilitiesEvent_1_event , r#body : r#CapabilitiesEvent_1_body } pub struct r#CapabilitiesEvent { pub r#_0 : r#CapabilitiesEvent_0 , r#_1 : r#CapabilitiesEvent_1 } pub type r#ProgressStartEvent_0 = r#Event ; # [doc = "The event signals that a long running operation is about to start and provides additional information for the client to set up a corresponding progress and cancellation UI.\nThe client is free to delay the showing of the UI in order to reduce flicker.\nThis event should only be sent if the corresponding capability `supportsProgressReporting` is true."] pub type r#ProgressStartEvent_1_event = String ; # [doc = "An ID that can be used in subsequent `progressUpdate` and `progressEnd` events to make them refer to the same progress reporting.\nIDs must be unique within a debug session."] pub type r#ProgressStartEvent_1_body_progressId = String ; # [doc = "Short title of the progress reporting. Shown in the UI to describe the long running operation."] pub type r#ProgressStartEvent_1_body_title = String ; # [doc = "The request ID that this progress report is related to. If specified a debug adapter is expected to emit progress events for the long running request until the request has been either completed or cancelled.\nIf the request ID is omitted, the progress report is assumed to be related to some general activity of the debug adapter."] pub type r#ProgressStartEvent_1_body_requestId = i32 ; # [doc = "If true, the request that reports progress may be cancelled with a `cancel` request.\nSo this property basically controls whether the client should use UX that supports cancellation.\nClients that don't support cancellation are allowed to ignore the setting."] pub type r#ProgressStartEvent_1_body_cancellable = bool ; # [doc = "More detailed progress message."] pub type r#ProgressStartEvent_1_body_message = String ; # [doc = "Progress percentage to display (value range: 0 to 100). If omitted no percentage is shown."] pub type r#ProgressStartEvent_1_body_percentage = f64 ; pub struct r#ProgressStartEvent_1_body { pub r#progressId : r#ProgressStartEvent_1_body_progressId , r#title : r#ProgressStartEvent_1_body_title , r#requestId : r#ProgressStartEvent_1_body_requestId , r#cancellable : r#ProgressStartEvent_1_body_cancellable , r#message : r#ProgressStartEvent_1_body_message , r#percentage : r#ProgressStartEvent_1_body_percentage } pub struct r#ProgressStartEvent_1 { pub r#event : r#ProgressStartEvent_1_event , r#body : r#ProgressStartEvent_1_body } pub struct r#ProgressStartEvent { pub r#_0 : r#ProgressStartEvent_0 , r#_1 : r#ProgressStartEvent_1 } pub type r#ProgressUpdateEvent_0 = r#Event ; # [doc = "The event signals that the progress reporting needs to be updated with a new message and/or percentage.\nThe client does not have to update the UI immediately, but the clients needs to keep track of the message and/or percentage values.\nThis event should only be sent if the corresponding capability `supportsProgressReporting` is true."] pub type r#ProgressUpdateEvent_1_event = String ; # [doc = "The ID that was introduced in the initial `progressStart` event."] pub type r#ProgressUpdateEvent_1_body_progressId = String ; # [doc = "More detailed progress message. If omitted, the previous message (if any) is used."] pub type r#ProgressUpdateEvent_1_body_message = String ; # [doc = "Progress percentage to display (value range: 0 to 100). If omitted no percentage is shown."] pub type r#ProgressUpdateEvent_1_body_percentage = f64 ; pub struct r#ProgressUpdateEvent_1_body { pub r#progressId : r#ProgressUpdateEvent_1_body_progressId , r#message : r#ProgressUpdateEvent_1_body_message , r#percentage : r#ProgressUpdateEvent_1_body_percentage } pub struct r#ProgressUpdateEvent_1 { pub r#event : r#ProgressUpdateEvent_1_event , r#body : r#ProgressUpdateEvent_1_body } pub struct r#ProgressUpdateEvent { pub r#_0 : r#ProgressUpdateEvent_0 , r#_1 : r#ProgressUpdateEvent_1 } pub type r#ProgressEndEvent_0 = r#Event ; # [doc = "The event signals the end of the progress reporting with a final message.\nThis event should only be sent if the corresponding capability `supportsProgressReporting` is true."] pub type r#ProgressEndEvent_1_event = String ; # [doc = "The ID that was introduced in the initial `ProgressStartEvent`."] pub type r#ProgressEndEvent_1_body_progressId = String ; # [doc = "More detailed progress message. If omitted, the previous message (if any) is used."] pub type r#ProgressEndEvent_1_body_message = String ; pub struct r#ProgressEndEvent_1_body { pub r#progressId : r#ProgressEndEvent_1_body_progressId , r#message : r#ProgressEndEvent_1_body_message } pub struct r#ProgressEndEvent_1 { pub r#event : r#ProgressEndEvent_1_event , r#body : r#ProgressEndEvent_1_body } pub struct r#ProgressEndEvent { pub r#_0 : r#ProgressEndEvent_0 , r#_1 : r#ProgressEndEvent_1 } pub type r#InvalidatedEvent_0 = r#Event ; # [doc = "This event signals that some state in the debug adapter has changed and requires that the client needs to re-render the data snapshot previously requested.\nDebug adapters do not have to emit this event for runtime changes like stopped or thread events because in that case the client refetches the new state anyway. But the event can be used for example to refresh the UI after rendering formatting has changed in the debug adapter.\nThis event should only be sent if the corresponding capability `supportsInvalidatedEvent` is true."] pub type r#InvalidatedEvent_1_event = String ; # [doc = "Set of logical areas that got invalidated. This property has a hint characteristic: a client can only be expected to make a 'best effort' in honoring the areas but there are no guarantees. If this property is missing, empty, or if values are not understood, the client should assume a single value `all`."] pub type r#InvalidatedEvent_1_body_areas_array = r#InvalidatedAreas ; pub type r#InvalidatedEvent_1_body_areas = Vec < r#InvalidatedEvent_1_body_areas_array > ; # [doc = "If specified, the client only needs to refetch data related to this thread."] pub type r#InvalidatedEvent_1_body_threadId = i32 ; # [doc = "If specified, the client only needs to refetch data related to this stack frame (and the `threadId` is ignored)."] pub type r#InvalidatedEvent_1_body_stackFrameId = i32 ; pub struct r#InvalidatedEvent_1_body { pub r#areas : r#InvalidatedEvent_1_body_areas , r#threadId : r#InvalidatedEvent_1_body_threadId , r#stackFrameId : r#InvalidatedEvent_1_body_stackFrameId } pub struct r#InvalidatedEvent_1 { pub r#event : r#InvalidatedEvent_1_event , r#body : r#InvalidatedEvent_1_body } pub struct r#InvalidatedEvent { pub r#_0 : r#InvalidatedEvent_0 , r#_1 : r#InvalidatedEvent_1 } pub type r#MemoryEvent_0 = r#Event ; # [doc = "This event indicates that some memory range has been updated. It should only be sent if the corresponding capability `supportsMemoryEvent` is true.\nClients typically react to the event by re-issuing a `readMemory` request if they show the memory identified by the `memoryReference` and if the updated memory range overlaps the displayed range. Clients should not make assumptions how individual memory references relate to each other, so they should not assume that they are part of a single continuous address range and might overlap.\nDebug adapters can use this event to indicate that the contents of a memory range has changed due to some other request like `setVariable` or `setExpression`. Debug adapters are not expected to emit this event for each and every memory change of a running program, because that information is typically not available from debuggers and it would flood clients with too many events."] pub type r#MemoryEvent_1_event = String ; # [doc = "Memory reference of a memory range that has been updated."] pub type r#MemoryEvent_1_body_memoryReference = String ; # [doc = "Starting offset in bytes where memory has been updated. Can be negative."] pub type r#MemoryEvent_1_body_offset = i32 ; # [doc = "Number of bytes updated."] pub type r#MemoryEvent_1_body_count = i32 ; pub struct r#MemoryEvent_1_body { pub r#memoryReference : r#MemoryEvent_1_body_memoryReference , r#offset : r#MemoryEvent_1_body_offset , r#count : r#MemoryEvent_1_body_count } pub struct r#MemoryEvent_1 { pub r#event : r#MemoryEvent_1_event , r#body : r#MemoryEvent_1_body } pub struct r#MemoryEvent { pub r#_0 : r#MemoryEvent_0 , r#_1 : r#MemoryEvent_1 } pub type r#RunInTerminalRequest_0 = r#Request ; # [doc = "Reverse Requests"] # [doc = "This request is sent from the debug adapter to the client to run a command in a terminal.\nThis is typically used to launch the debuggee in a terminal provided by the client.\nThis request should only be called if the corresponding client capability `supportsRunInTerminalRequest` is true.\nClient implementations of `runInTerminal` are free to run the command however they choose including issuing the command to a command line interpreter (aka 'shell'). Argument strings passed to the `runInTerminal` request must arrive verbatim in the command to be run. As a consequence, clients which use a shell are responsible for escaping any special shell characters in the argument strings to prevent them from being interpreted (and modified) by the shell.\nSome users may wish to take advantage of shell processing in the argument strings. For clients which implement `runInTerminal` using an intermediary shell, the `argsCanBeInterpretedByShell` property can be set to true. In this case the client is requested not to escape any special shell characters in the argument strings."] pub type r#RunInTerminalRequest_1_command = String ; pub type r#RunInTerminalRequest_1_arguments = r#RunInTerminalRequestArguments ; pub struct r#RunInTerminalRequest_1 { pub r#command : r#RunInTerminalRequest_1_command , r#arguments : r#RunInTerminalRequest_1_arguments } pub struct r#RunInTerminalRequest { pub r#_0 : r#RunInTerminalRequest_0 , r#_1 : r#RunInTerminalRequest_1 } # [doc = "Arguments for `runInTerminal` request."] # [doc = "What kind of terminal to launch. Defaults to `integrated` if not specified."] pub type r#RunInTerminalRequestArguments_kind = String ; # [doc = "Title of the terminal."] pub type r#RunInTerminalRequestArguments_title = String ; # [doc = "Working directory for the command. For non-empty, valid paths this typically results in execution of a change directory command."] pub type r#RunInTerminalRequestArguments_cwd = String ; # [doc = "List of arguments. The first argument is the command to run."] pub type r#RunInTerminalRequestArguments_args_array = String ; pub type r#RunInTerminalRequestArguments_args = Vec < r#RunInTerminalRequestArguments_args_array > ; # [doc = "Environment key-value pairs that are added to or removed from the default environment."] pub struct r#RunInTerminalRequestArguments_env { pub } # [doc = "This property should only be set if the corresponding capability `supportsArgsCanBeInterpretedByShell` is true. If the client uses an intermediary shell to launch the application, then the client must not attempt to escape characters with special meanings for the shell. The user is fully responsible for escaping as needed and that arguments using special characters may not be portable across shells."] pub type r#RunInTerminalRequestArguments_argsCanBeInterpretedByShell = bool ; pub struct r#RunInTerminalRequestArguments { pub r#kind : r#RunInTerminalRequestArguments_kind , r#title : r#RunInTerminalRequestArguments_title , r#cwd : r#RunInTerminalRequestArguments_cwd , r#args : r#RunInTerminalRequestArguments_args , r#env : r#RunInTerminalRequestArguments_env , r#argsCanBeInterpretedByShell : r#RunInTerminalRequestArguments_argsCanBeInterpretedByShell } pub type r#RunInTerminalResponse_0 = r#Response ; # [doc = "Response to `runInTerminal` request."] # [doc = "The process ID. The value should be less than or equal to 2147483647 (2^31-1)."] pub type r#RunInTerminalResponse_1_body_processId = i32 ; # [doc = "The process ID of the terminal shell. The value should be less than or equal to 2147483647 (2^31-1)."] pub type r#RunInTerminalResponse_1_body_shellProcessId = i32 ; pub struct r#RunInTerminalResponse_1_body { pub r#processId : r#RunInTerminalResponse_1_body_processId , r#shellProcessId : r#RunInTerminalResponse_1_body_shellProcessId } pub struct r#RunInTerminalResponse_1 { pub r#body : r#RunInTerminalResponse_1_body } pub struct r#RunInTerminalResponse { pub r#_0 : r#RunInTerminalResponse_0 , r#_1 : r#RunInTerminalResponse_1 } pub type r#StartDebuggingRequest_0 = r#Request ; # [doc = "This request is sent from the debug adapter to the client to start a new debug session of the same type as the caller.\nThis request should only be sent if the corresponding client capability `supportsStartDebuggingRequest` is true.\nA client implementation of `startDebugging` should start a new debug session (of the same type as the caller) in the same way that the caller's session was started. If the client supports hierarchical debug sessions, the newly created session can be treated as a child of the caller session."] pub type r#StartDebuggingRequest_1_command = String ; pub type r#StartDebuggingRequest_1_arguments = r#StartDebuggingRequestArguments ; pub struct r#StartDebuggingRequest_1 { pub r#command : r#StartDebuggingRequest_1_command , r#arguments : r#StartDebuggingRequest_1_arguments } pub struct r#StartDebuggingRequest { pub r#_0 : r#StartDebuggingRequest_0 , r#_1 : r#StartDebuggingRequest_1 } # [doc = "Arguments for `startDebugging` request."] # [doc = "Arguments passed to the new debug session. The arguments must only contain properties understood by the `launch` or `attach` requests of the debug adapter and they must not contain any client-specific properties (e.g. `type`) or client-specific features (e.g. substitutable 'variables')."] pub struct r#StartDebuggingRequestArguments_configuration { pub } # [doc = "Indicates whether the new debug session should be started with a `launch` or `attach` request."] pub type r#StartDebuggingRequestArguments_request = String ; pub struct r#StartDebuggingRequestArguments { pub r#configuration : r#StartDebuggingRequestArguments_configuration , r#request : r#StartDebuggingRequestArguments_request } pub type r#StartDebuggingResponse_0 = r#Response ; # [doc = "Response to `startDebugging` request. This is just an acknowledgement, so no body field is required."] pub struct r#StartDebuggingResponse_1 { pub } pub struct r#StartDebuggingResponse { pub r#_0 : r#StartDebuggingResponse_0 , r#_1 : r#StartDebuggingResponse_1 } pub type r#InitializeRequest_0 = r#Request ; # [doc = "Requests"] # [doc = "The `initialize` request is sent as the first request from the client to the debug adapter in order to configure it with client capabilities and to retrieve capabilities from the debug adapter.\nUntil the debug adapter has responded with an `initialize` response, the client must not send any additional requests or events to the debug adapter.\nIn addition the debug adapter is not allowed to send any requests or events to the client until it has responded with an `initialize` response.\nThe `initialize` request may only be sent once."] pub type r#InitializeRequest_1_command = String ; pub type r#InitializeRequest_1_arguments = r#InitializeRequestArguments ; pub struct r#InitializeRequest_1 { pub r#command : r#InitializeRequest_1_command , r#arguments : r#InitializeRequest_1_arguments } pub struct r#InitializeRequest { pub r#_0 : r#InitializeRequest_0 , r#_1 : r#InitializeRequest_1 } # [doc = "Arguments for `initialize` request."] # [doc = "The ID of the client using this adapter."] pub type r#InitializeRequestArguments_clientID = String ; # [doc = "The human-readable name of the client using this adapter."] pub type r#InitializeRequestArguments_clientName = String ; # [doc = "The ID of the debug adapter."] pub type r#InitializeRequestArguments_adapterID = String ; # [doc = "The ISO-639 locale of the client using this adapter, e.g. en-US or de-CH."] pub type r#InitializeRequestArguments_locale = String ; # [doc = "If true all line numbers are 1-based (default)."] pub type r#InitializeRequestArguments_linesStartAt1 = bool ; # [doc = "If true all column numbers are 1-based (default)."] pub type r#InitializeRequestArguments_columnsStartAt1 = bool ; # [doc = "Determines in what format paths are specified. The default is `path`, which is the native format."] pub type r#InitializeRequestArguments_pathFormat = String ; # [doc = "Client supports the `type` attribute for variables."] pub type r#InitializeRequestArguments_supportsVariableType = bool ; # [doc = "Client supports the paging of variables."] pub type r#InitializeRequestArguments_supportsVariablePaging = bool ; # [doc = "Client supports the `runInTerminal` request."] pub type r#InitializeRequestArguments_supportsRunInTerminalRequest = bool ; # [doc = "Client supports memory references."] pub type r#InitializeRequestArguments_supportsMemoryReferences = bool ; # [doc = "Client supports progress reporting."] pub type r#InitializeRequestArguments_supportsProgressReporting = bool ; # [doc = "Client supports the `invalidated` event."] pub type r#InitializeRequestArguments_supportsInvalidatedEvent = bool ; # [doc = "Client supports the `memory` event."] pub type r#InitializeRequestArguments_supportsMemoryEvent = bool ; # [doc = "Client supports the `argsCanBeInterpretedByShell` attribute on the `runInTerminal` request."] pub type r#InitializeRequestArguments_supportsArgsCanBeInterpretedByShell = bool ; # [doc = "Client supports the `startDebugging` request."] pub type r#InitializeRequestArguments_supportsStartDebuggingRequest = bool ; pub struct r#InitializeRequestArguments { pub r#clientID : r#InitializeRequestArguments_clientID , r#clientName : r#InitializeRequestArguments_clientName , r#adapterID : r#InitializeRequestArguments_adapterID , r#locale : r#InitializeRequestArguments_locale , r#linesStartAt1 : r#InitializeRequestArguments_linesStartAt1 , r#columnsStartAt1 : r#InitializeRequestArguments_columnsStartAt1 , r#pathFormat : r#InitializeRequestArguments_pathFormat , r#supportsVariableType : r#InitializeRequestArguments_supportsVariableType , r#supportsVariablePaging : r#InitializeRequestArguments_supportsVariablePaging , r#supportsRunInTerminalRequest : r#InitializeRequestArguments_supportsRunInTerminalRequest , r#supportsMemoryReferences : r#InitializeRequestArguments_supportsMemoryReferences , r#supportsProgressReporting : r#InitializeRequestArguments_supportsProgressReporting , r#supportsInvalidatedEvent : r#InitializeRequestArguments_supportsInvalidatedEvent , r#supportsMemoryEvent : r#InitializeRequestArguments_supportsMemoryEvent , r#supportsArgsCanBeInterpretedByShell : r#InitializeRequestArguments_supportsArgsCanBeInterpretedByShell , r#supportsStartDebuggingRequest : r#InitializeRequestArguments_supportsStartDebuggingRequest } pub type r#InitializeResponse_0 = r#Response ; # [doc = "Response to `initialize` request."] # [doc = "The capabilities of this debug adapter."] pub type r#InitializeResponse_1_body = r#Capabilities ; pub struct r#InitializeResponse_1 { pub r#body : r#InitializeResponse_1_body } pub struct r#InitializeResponse { pub r#_0 : r#InitializeResponse_0 , r#_1 : r#InitializeResponse_1 } pub type r#ConfigurationDoneRequest_0 = r#Request ; # [doc = "This request indicates that the client has finished initialization of the debug adapter.\nSo it is the last request in the sequence of configuration requests (which was started by the `initialized` event).\nClients should only call this request if the corresponding capability `supportsConfigurationDoneRequest` is true."] pub type r#ConfigurationDoneRequest_1_command = String ; pub type r#ConfigurationDoneRequest_1_arguments = r#ConfigurationDoneArguments ; pub struct r#ConfigurationDoneRequest_1 { pub r#command : r#ConfigurationDoneRequest_1_command , r#arguments : r#ConfigurationDoneRequest_1_arguments } pub struct r#ConfigurationDoneRequest { pub r#_0 : r#ConfigurationDoneRequest_0 , r#_1 : r#ConfigurationDoneRequest_1 } # [doc = "Arguments for `configurationDone` request."] pub struct r#ConfigurationDoneArguments { pub } pub type r#ConfigurationDoneResponse_0 = r#Response ; # [doc = "Response to `configurationDone` request. This is just an acknowledgement, so no body field is required."] pub struct r#ConfigurationDoneResponse_1 { pub } pub struct r#ConfigurationDoneResponse { pub r#_0 : r#ConfigurationDoneResponse_0 , r#_1 : r#ConfigurationDoneResponse_1 } pub type r#LaunchRequest_0 = r#Request ; # [doc = "This launch request is sent from the client to the debug adapter to start the debuggee with or without debugging (if `noDebug` is true).\nSince launching is debugger/runtime specific, the arguments for this request are not part of this specification."] pub type r#LaunchRequest_1_command = String ; pub type r#LaunchRequest_1_arguments = r#LaunchRequestArguments ; pub struct r#LaunchRequest_1 { pub r#command : r#LaunchRequest_1_command , r#arguments : r#LaunchRequest_1_arguments } pub struct r#LaunchRequest { pub r#_0 : r#LaunchRequest_0 , r#_1 : r#LaunchRequest_1 } # [doc = "Arguments for `launch` request. Additional attributes are implementation specific."] # [doc = "If true, the launch request should launch the program without enabling debugging."] pub type r#LaunchRequestArguments_noDebug = bool ; # [doc = "Arbitrary data from the previous, restarted session.\nThe data is sent as the `restart` attribute of the `terminated` event.\nThe client should leave the data intact."] pub enum r#LaunchRequestArguments___restart { } pub struct r#LaunchRequestArguments { pub r#noDebug : r#LaunchRequestArguments_noDebug , r#__restart : r#LaunchRequestArguments___restart } pub type r#LaunchResponse_0 = r#Response ; # [doc = "Response to `launch` request. This is just an acknowledgement, so no body field is required."] pub struct r#LaunchResponse_1 { pub } pub struct r#LaunchResponse { pub r#_0 : r#LaunchResponse_0 , r#_1 : r#LaunchResponse_1 } pub type r#AttachRequest_0 = r#Request ; # [doc = "The `attach` request is sent from the client to the debug adapter to attach to a debuggee that is already running.\nSince attaching is debugger/runtime specific, the arguments for this request are not part of this specification."] pub type r#AttachRequest_1_command = String ; pub type r#AttachRequest_1_arguments = r#AttachRequestArguments ; pub struct r#AttachRequest_1 { pub r#command : r#AttachRequest_1_command , r#arguments : r#AttachRequest_1_arguments } pub struct r#AttachRequest { pub r#_0 : r#AttachRequest_0 , r#_1 : r#AttachRequest_1 } # [doc = "Arguments for `attach` request. Additional attributes are implementation specific."] # [doc = "Arbitrary data from the previous, restarted session.\nThe data is sent as the `restart` attribute of the `terminated` event.\nThe client should leave the data intact."] pub enum r#AttachRequestArguments___restart { } pub struct r#AttachRequestArguments { pub r#__restart : r#AttachRequestArguments___restart } pub type r#AttachResponse_0 = r#Response ; # [doc = "Response to `attach` request. This is just an acknowledgement, so no body field is required."] pub struct r#AttachResponse_1 { pub } pub struct r#AttachResponse { pub r#_0 : r#AttachResponse_0 , r#_1 : r#AttachResponse_1 } pub type r#RestartRequest_0 = r#Request ; # [doc = "Restarts a debug session. Clients should only call this request if the corresponding capability `supportsRestartRequest` is true.\nIf the capability is missing or has the value false, a typical client emulates `restart` by terminating the debug adapter first and then launching it anew."] pub type r#RestartRequest_1_command = String ; pub type r#RestartRequest_1_arguments = r#RestartArguments ; pub struct r#RestartRequest_1 { pub r#command : r#RestartRequest_1_command , r#arguments : r#RestartRequest_1_arguments } pub struct r#RestartRequest { pub r#_0 : r#RestartRequest_0 , r#_1 : r#RestartRequest_1 } # [doc = "Arguments for `restart` request."] # [doc = "The latest version of the `launch` or `attach` configuration."] pub type r#RestartArguments_arguments_0 = r#LaunchRequestArguments ; pub type r#RestartArguments_arguments_1 = r#AttachRequestArguments ; pub enum r#RestartArguments_arguments { r#_0 (r#RestartArguments_arguments_0) , r#_1 (r#RestartArguments_arguments_1) } pub struct r#RestartArguments { pub r#arguments : r#RestartArguments_arguments } pub type r#RestartResponse_0 = r#Response ; # [doc = "Response to `restart` request. This is just an acknowledgement, so no body field is required."] pub struct r#RestartResponse_1 { pub } pub struct r#RestartResponse { pub r#_0 : r#RestartResponse_0 , r#_1 : r#RestartResponse_1 } pub type r#DisconnectRequest_0 = r#Request ; # [doc = "The `disconnect` request asks the debug adapter to disconnect from the debuggee (thus ending the debug session) and then to shut down itself (the debug adapter).\nIn addition, the debug adapter must terminate the debuggee if it was started with the `launch` request. If an `attach` request was used to connect to the debuggee, then the debug adapter must not terminate the debuggee.\nThis implicit behavior of when to terminate the debuggee can be overridden with the `terminateDebuggee` argument (which is only supported by a debug adapter if the corresponding capability `supportTerminateDebuggee` is true)."] pub type r#DisconnectRequest_1_command = String ; pub type r#DisconnectRequest_1_arguments = r#DisconnectArguments ; pub struct r#DisconnectRequest_1 { pub r#command : r#DisconnectRequest_1_command , r#arguments : r#DisconnectRequest_1_arguments } pub struct r#DisconnectRequest { pub r#_0 : r#DisconnectRequest_0 , r#_1 : r#DisconnectRequest_1 } # [doc = "Arguments for `disconnect` request."] # [doc = "A value of true indicates that this `disconnect` request is part of a restart sequence."] pub type r#DisconnectArguments_restart = bool ; # [doc = "Indicates whether the debuggee should be terminated when the debugger is disconnected.\nIf unspecified, the debug adapter is free to do whatever it thinks is best.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportTerminateDebuggee` is true."] pub type r#DisconnectArguments_terminateDebuggee = bool ; # [doc = "Indicates whether the debuggee should stay suspended when the debugger is disconnected.\nIf unspecified, the debuggee should resume execution.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportSuspendDebuggee` is true."] pub type r#DisconnectArguments_suspendDebuggee = bool ; pub struct r#DisconnectArguments { pub r#restart : r#DisconnectArguments_restart , r#terminateDebuggee : r#DisconnectArguments_terminateDebuggee , r#suspendDebuggee : r#DisconnectArguments_suspendDebuggee } pub type r#DisconnectResponse_0 = r#Response ; # [doc = "Response to `disconnect` request. This is just an acknowledgement, so no body field is required."] pub struct r#DisconnectResponse_1 { pub } pub struct r#DisconnectResponse { pub r#_0 : r#DisconnectResponse_0 , r#_1 : r#DisconnectResponse_1 } pub type r#TerminateRequest_0 = r#Request ; # [doc = "The `terminate` request is sent from the client to the debug adapter in order to shut down the debuggee gracefully. Clients should only call this request if the capability `supportsTerminateRequest` is true.\nTypically a debug adapter implements `terminate` by sending a software signal which the debuggee intercepts in order to clean things up properly before terminating itself.\nPlease note that this request does not directly affect the state of the debug session: if the debuggee decides to veto the graceful shutdown for any reason by not terminating itself, then the debug session just continues.\nClients can surface the `terminate` request as an explicit command or they can integrate it into a two stage Stop command that first sends `terminate` to request a graceful shutdown, and if that fails uses `disconnect` for a forceful shutdown."] pub type r#TerminateRequest_1_command = String ; pub type r#TerminateRequest_1_arguments = r#TerminateArguments ; pub struct r#TerminateRequest_1 { pub r#command : r#TerminateRequest_1_command , r#arguments : r#TerminateRequest_1_arguments } pub struct r#TerminateRequest { pub r#_0 : r#TerminateRequest_0 , r#_1 : r#TerminateRequest_1 } # [doc = "Arguments for `terminate` request."] # [doc = "A value of true indicates that this `terminate` request is part of a restart sequence."] pub type r#TerminateArguments_restart = bool ; pub struct r#TerminateArguments { pub r#restart : r#TerminateArguments_restart } pub type r#TerminateResponse_0 = r#Response ; # [doc = "Response to `terminate` request. This is just an acknowledgement, so no body field is required."] pub struct r#TerminateResponse_1 { pub } pub struct r#TerminateResponse { pub r#_0 : r#TerminateResponse_0 , r#_1 : r#TerminateResponse_1 } pub type r#BreakpointLocationsRequest_0 = r#Request ; # [doc = "The `breakpointLocations` request returns all possible locations for source breakpoints in a given range.\nClients should only call this request if the corresponding capability `supportsBreakpointLocationsRequest` is true."] pub type r#BreakpointLocationsRequest_1_command = String ; pub type r#BreakpointLocationsRequest_1_arguments = r#BreakpointLocationsArguments ; pub struct r#BreakpointLocationsRequest_1 { pub r#command : r#BreakpointLocationsRequest_1_command , r#arguments : r#BreakpointLocationsRequest_1_arguments } pub struct r#BreakpointLocationsRequest { pub r#_0 : r#BreakpointLocationsRequest_0 , r#_1 : r#BreakpointLocationsRequest_1 } # [doc = "Arguments for `breakpointLocations` request."] # [doc = "The source location of the breakpoints; either `source.path` or `source.reference` must be specified."] pub type r#BreakpointLocationsArguments_source = r#Source ; # [doc = "Start line of range to search possible breakpoint locations in. If only the line is specified, the request returns all possible locations in that line."] pub type r#BreakpointLocationsArguments_line = i32 ; # [doc = "Start position within `line` to search possible breakpoint locations in. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based. If no column is given, the first position in the start line is assumed."] pub type r#BreakpointLocationsArguments_column = i32 ; # [doc = "End line of range to search possible breakpoint locations in. If no end line is given, then the end line is assumed to be the start line."] pub type r#BreakpointLocationsArguments_endLine = i32 ; # [doc = "End position within `endLine` to search possible breakpoint locations in. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based. If no end column is given, the last position in the end line is assumed."] pub type r#BreakpointLocationsArguments_endColumn = i32 ; pub struct r#BreakpointLocationsArguments { pub r#source : r#BreakpointLocationsArguments_source , r#line : r#BreakpointLocationsArguments_line , r#column : r#BreakpointLocationsArguments_column , r#endLine : r#BreakpointLocationsArguments_endLine , r#endColumn : r#BreakpointLocationsArguments_endColumn } pub type r#BreakpointLocationsResponse_0 = r#Response ; # [doc = "Response to `breakpointLocations` request.\nContains possible locations for source breakpoints."] # [doc = "Sorted set of possible breakpoint locations."] pub type r#BreakpointLocationsResponse_1_body_breakpoints_array = r#BreakpointLocation ; pub type r#BreakpointLocationsResponse_1_body_breakpoints = Vec < r#BreakpointLocationsResponse_1_body_breakpoints_array > ; pub struct r#BreakpointLocationsResponse_1_body { pub r#breakpoints : r#BreakpointLocationsResponse_1_body_breakpoints } pub struct r#BreakpointLocationsResponse_1 { pub r#body : r#BreakpointLocationsResponse_1_body } pub struct r#BreakpointLocationsResponse { pub r#_0 : r#BreakpointLocationsResponse_0 , r#_1 : r#BreakpointLocationsResponse_1 } pub type r#SetBreakpointsRequest_0 = r#Request ; # [doc = "Sets multiple breakpoints for a single source and clears all previous breakpoints in that source.\nTo clear all breakpoint for a source, specify an empty array.\nWhen a breakpoint is hit, a `stopped` event (with reason `breakpoint`) is generated."] pub type r#SetBreakpointsRequest_1_command = String ; pub type r#SetBreakpointsRequest_1_arguments = r#SetBreakpointsArguments ; pub struct r#SetBreakpointsRequest_1 { pub r#command : r#SetBreakpointsRequest_1_command , r#arguments : r#SetBreakpointsRequest_1_arguments } pub struct r#SetBreakpointsRequest { pub r#_0 : r#SetBreakpointsRequest_0 , r#_1 : r#SetBreakpointsRequest_1 } # [doc = "Arguments for `setBreakpoints` request."] # [doc = "The source location of the breakpoints; either `source.path` or `source.sourceReference` must be specified."] pub type r#SetBreakpointsArguments_source = r#Source ; # [doc = "The code locations of the breakpoints."] pub type r#SetBreakpointsArguments_breakpoints_array = r#SourceBreakpoint ; pub type r#SetBreakpointsArguments_breakpoints = Vec < r#SetBreakpointsArguments_breakpoints_array > ; # [doc = "Deprecated: The code locations of the breakpoints."] pub type r#SetBreakpointsArguments_lines_array = i32 ; pub type r#SetBreakpointsArguments_lines = Vec < r#SetBreakpointsArguments_lines_array > ; # [doc = "A value of true indicates that the underlying source has been modified which results in new breakpoint locations."] pub type r#SetBreakpointsArguments_sourceModified = bool ; pub struct r#SetBreakpointsArguments { pub r#source : r#SetBreakpointsArguments_source , r#breakpoints : r#SetBreakpointsArguments_breakpoints , r#lines : r#SetBreakpointsArguments_lines , r#sourceModified : r#SetBreakpointsArguments_sourceModified } pub type r#SetBreakpointsResponse_0 = r#Response ; # [doc = "Response to `setBreakpoints` request.\nReturned is information about each breakpoint created by this request.\nThis includes the actual code location and whether the breakpoint could be verified.\nThe breakpoints returned are in the same order as the elements of the `breakpoints`\n(or the deprecated `lines`) array in the arguments."] # [doc = "Information about the breakpoints.\nThe array elements are in the same order as the elements of the `breakpoints` (or the deprecated `lines`) array in the arguments."] pub type r#SetBreakpointsResponse_1_body_breakpoints_array = r#Breakpoint ; pub type r#SetBreakpointsResponse_1_body_breakpoints = Vec < r#SetBreakpointsResponse_1_body_breakpoints_array > ; pub struct r#SetBreakpointsResponse_1_body { pub r#breakpoints : r#SetBreakpointsResponse_1_body_breakpoints } pub struct r#SetBreakpointsResponse_1 { pub r#body : r#SetBreakpointsResponse_1_body } pub struct r#SetBreakpointsResponse { pub r#_0 : r#SetBreakpointsResponse_0 , r#_1 : r#SetBreakpointsResponse_1 } pub type r#SetFunctionBreakpointsRequest_0 = r#Request ; # [doc = "Replaces all existing function breakpoints with new function breakpoints.\nTo clear all function breakpoints, specify an empty array.\nWhen a function breakpoint is hit, a `stopped` event (with reason `function breakpoint`) is generated.\nClients should only call this request if the corresponding capability `supportsFunctionBreakpoints` is true."] pub type r#SetFunctionBreakpointsRequest_1_command = String ; pub type r#SetFunctionBreakpointsRequest_1_arguments = r#SetFunctionBreakpointsArguments ; pub struct r#SetFunctionBreakpointsRequest_1 { pub r#command : r#SetFunctionBreakpointsRequest_1_command , r#arguments : r#SetFunctionBreakpointsRequest_1_arguments } pub struct r#SetFunctionBreakpointsRequest { pub r#_0 : r#SetFunctionBreakpointsRequest_0 , r#_1 : r#SetFunctionBreakpointsRequest_1 } # [doc = "Arguments for `setFunctionBreakpoints` request."] # [doc = "The function names of the breakpoints."] pub type r#SetFunctionBreakpointsArguments_breakpoints_array = r#FunctionBreakpoint ; pub type r#SetFunctionBreakpointsArguments_breakpoints = Vec < r#SetFunctionBreakpointsArguments_breakpoints_array > ; pub struct r#SetFunctionBreakpointsArguments { pub r#breakpoints : r#SetFunctionBreakpointsArguments_breakpoints } pub type r#SetFunctionBreakpointsResponse_0 = r#Response ; # [doc = "Response to `setFunctionBreakpoints` request.\nReturned is information about each breakpoint created by this request."] # [doc = "Information about the breakpoints. The array elements correspond to the elements of the `breakpoints` array."] pub type r#SetFunctionBreakpointsResponse_1_body_breakpoints_array = r#Breakpoint ; pub type r#SetFunctionBreakpointsResponse_1_body_breakpoints = Vec < r#SetFunctionBreakpointsResponse_1_body_breakpoints_array > ; pub struct r#SetFunctionBreakpointsResponse_1_body { pub r#breakpoints : r#SetFunctionBreakpointsResponse_1_body_breakpoints } pub struct r#SetFunctionBreakpointsResponse_1 { pub r#body : r#SetFunctionBreakpointsResponse_1_body } pub struct r#SetFunctionBreakpointsResponse { pub r#_0 : r#SetFunctionBreakpointsResponse_0 , r#_1 : r#SetFunctionBreakpointsResponse_1 } pub type r#SetExceptionBreakpointsRequest_0 = r#Request ; # [doc = "The request configures the debugger's response to thrown exceptions.\nIf an exception is configured to break, a `stopped` event is fired (with reason `exception`).\nClients should only call this request if the corresponding capability `exceptionBreakpointFilters` returns one or more filters."] pub type r#SetExceptionBreakpointsRequest_1_command = String ; pub type r#SetExceptionBreakpointsRequest_1_arguments = r#SetExceptionBreakpointsArguments ; pub struct r#SetExceptionBreakpointsRequest_1 { pub r#command : r#SetExceptionBreakpointsRequest_1_command , r#arguments : r#SetExceptionBreakpointsRequest_1_arguments } pub struct r#SetExceptionBreakpointsRequest { pub r#_0 : r#SetExceptionBreakpointsRequest_0 , r#_1 : r#SetExceptionBreakpointsRequest_1 } # [doc = "Arguments for `setExceptionBreakpoints` request."] # [doc = "Set of exception filters specified by their ID. The set of all possible exception filters is defined by the `exceptionBreakpointFilters` capability. The `filter` and `filterOptions` sets are additive."] pub type r#SetExceptionBreakpointsArguments_filters_array = String ; pub type r#SetExceptionBreakpointsArguments_filters = Vec < r#SetExceptionBreakpointsArguments_filters_array > ; # [doc = "Set of exception filters and their options. The set of all possible exception filters is defined by the `exceptionBreakpointFilters` capability. This attribute is only honored by a debug adapter if the corresponding capability `supportsExceptionFilterOptions` is true. The `filter` and `filterOptions` sets are additive."] pub type r#SetExceptionBreakpointsArguments_filterOptions_array = r#ExceptionFilterOptions ; pub type r#SetExceptionBreakpointsArguments_filterOptions = Vec < r#SetExceptionBreakpointsArguments_filterOptions_array > ; # [doc = "Configuration options for selected exceptions.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportsExceptionOptions` is true."] pub type r#SetExceptionBreakpointsArguments_exceptionOptions_array = r#ExceptionOptions ; pub type r#SetExceptionBreakpointsArguments_exceptionOptions = Vec < r#SetExceptionBreakpointsArguments_exceptionOptions_array > ; pub struct r#SetExceptionBreakpointsArguments { pub r#filters : r#SetExceptionBreakpointsArguments_filters , r#filterOptions : r#SetExceptionBreakpointsArguments_filterOptions , r#exceptionOptions : r#SetExceptionBreakpointsArguments_exceptionOptions } pub type r#SetExceptionBreakpointsResponse_0 = r#Response ; # [doc = "Response to `setExceptionBreakpoints` request.\nThe response contains an array of `Breakpoint` objects with information about each exception breakpoint or filter. The `Breakpoint` objects are in the same order as the elements of the `filters`, `filterOptions`, `exceptionOptions` arrays given as arguments. If both `filters` and `filterOptions` are given, the returned array must start with `filters` information first, followed by `filterOptions` information.\nThe `verified` property of a `Breakpoint` object signals whether the exception breakpoint or filter could be successfully created and whether the condition or hit count expressions are valid. In case of an error the `message` property explains the problem. The `id` property can be used to introduce a unique ID for the exception breakpoint or filter so that it can be updated subsequently by sending breakpoint events.\nFor backward compatibility both the `breakpoints` array and the enclosing `body` are optional. If these elements are missing a client is not able to show problems for individual exception breakpoints or filters."] # [doc = "Information about the exception breakpoints or filters.\nThe breakpoints returned are in the same order as the elements of the `filters`, `filterOptions`, `exceptionOptions` arrays in the arguments. If both `filters` and `filterOptions` are given, the returned array must start with `filters` information first, followed by `filterOptions` information."] pub type r#SetExceptionBreakpointsResponse_1_body_breakpoints_array = r#Breakpoint ; pub type r#SetExceptionBreakpointsResponse_1_body_breakpoints = Vec < r#SetExceptionBreakpointsResponse_1_body_breakpoints_array > ; pub struct r#SetExceptionBreakpointsResponse_1_body { pub r#breakpoints : r#SetExceptionBreakpointsResponse_1_body_breakpoints } pub struct r#SetExceptionBreakpointsResponse_1 { pub r#body : r#SetExceptionBreakpointsResponse_1_body } pub struct r#SetExceptionBreakpointsResponse { pub r#_0 : r#SetExceptionBreakpointsResponse_0 , r#_1 : r#SetExceptionBreakpointsResponse_1 } pub type r#DataBreakpointInfoRequest_0 = r#Request ; # [doc = "Obtains information on a possible data breakpoint that could be set on an expression or variable.\nClients should only call this request if the corresponding capability `supportsDataBreakpoints` is true."] pub type r#DataBreakpointInfoRequest_1_command = String ; pub type r#DataBreakpointInfoRequest_1_arguments = r#DataBreakpointInfoArguments ; pub struct r#DataBreakpointInfoRequest_1 { pub r#command : r#DataBreakpointInfoRequest_1_command , r#arguments : r#DataBreakpointInfoRequest_1_arguments } pub struct r#DataBreakpointInfoRequest { pub r#_0 : r#DataBreakpointInfoRequest_0 , r#_1 : r#DataBreakpointInfoRequest_1 } # [doc = "Arguments for `dataBreakpointInfo` request."] # [doc = "Reference to the variable container if the data breakpoint is requested for a child of the container. The `variablesReference` must have been obtained in the current suspended state. See 'Lifetime of Object References' in the Overview section for details."] pub type r#DataBreakpointInfoArguments_variablesReference = i32 ; # [doc = "The name of the variable's child to obtain data breakpoint information for.\nIf `variablesReference` isn't specified, this can be an expression."] pub type r#DataBreakpointInfoArguments_name = String ; # [doc = "When `name` is an expression, evaluate it in the scope of this stack frame. If not specified, the expression is evaluated in the global scope. When `variablesReference` is specified, this property has no effect."] pub type r#DataBreakpointInfoArguments_frameId = i32 ; pub struct r#DataBreakpointInfoArguments { pub r#variablesReference : r#DataBreakpointInfoArguments_variablesReference , r#name : r#DataBreakpointInfoArguments_name , r#frameId : r#DataBreakpointInfoArguments_frameId } pub type r#DataBreakpointInfoResponse_0 = r#Response ; # [doc = "Response to `dataBreakpointInfo` request."] # [doc = "An identifier for the data on which a data breakpoint can be registered with the `setDataBreakpoints` request or null if no data breakpoint is available."] pub enum r#DataBreakpointInfoResponse_1_body_dataId { } # [doc = "UI string that describes on what data the breakpoint is set on or why a data breakpoint is not available."] pub type r#DataBreakpointInfoResponse_1_body_description = String ; # [doc = "Attribute lists the available access types for a potential data breakpoint. A UI client could surface this information."] pub type r#DataBreakpointInfoResponse_1_body_accessTypes_array = r#DataBreakpointAccessType ; pub type r#DataBreakpointInfoResponse_1_body_accessTypes = Vec < r#DataBreakpointInfoResponse_1_body_accessTypes_array > ; # [doc = "Attribute indicates that a potential data breakpoint could be persisted across sessions."] pub type r#DataBreakpointInfoResponse_1_body_canPersist = bool ; pub struct r#DataBreakpointInfoResponse_1_body { pub r#dataId : r#DataBreakpointInfoResponse_1_body_dataId , r#description : r#DataBreakpointInfoResponse_1_body_description , r#accessTypes : r#DataBreakpointInfoResponse_1_body_accessTypes , r#canPersist : r#DataBreakpointInfoResponse_1_body_canPersist } pub struct r#DataBreakpointInfoResponse_1 { pub r#body : r#DataBreakpointInfoResponse_1_body } pub struct r#DataBreakpointInfoResponse { pub r#_0 : r#DataBreakpointInfoResponse_0 , r#_1 : r#DataBreakpointInfoResponse_1 } pub type r#SetDataBreakpointsRequest_0 = r#Request ; # [doc = "Replaces all existing data breakpoints with new data breakpoints.\nTo clear all data breakpoints, specify an empty array.\nWhen a data breakpoint is hit, a `stopped` event (with reason `data breakpoint`) is generated.\nClients should only call this request if the corresponding capability `supportsDataBreakpoints` is true."] pub type r#SetDataBreakpointsRequest_1_command = String ; pub type r#SetDataBreakpointsRequest_1_arguments = r#SetDataBreakpointsArguments ; pub struct r#SetDataBreakpointsRequest_1 { pub r#command : r#SetDataBreakpointsRequest_1_command , r#arguments : r#SetDataBreakpointsRequest_1_arguments } pub struct r#SetDataBreakpointsRequest { pub r#_0 : r#SetDataBreakpointsRequest_0 , r#_1 : r#SetDataBreakpointsRequest_1 } # [doc = "Arguments for `setDataBreakpoints` request."] # [doc = "The contents of this array replaces all existing data breakpoints. An empty array clears all data breakpoints."] pub type r#SetDataBreakpointsArguments_breakpoints_array = r#DataBreakpoint ; pub type r#SetDataBreakpointsArguments_breakpoints = Vec < r#SetDataBreakpointsArguments_breakpoints_array > ; pub struct r#SetDataBreakpointsArguments { pub r#breakpoints : r#SetDataBreakpointsArguments_breakpoints } pub type r#SetDataBreakpointsResponse_0 = r#Response ; # [doc = "Response to `setDataBreakpoints` request.\nReturned is information about each breakpoint created by this request."] # [doc = "Information about the data breakpoints. The array elements correspond to the elements of the input argument `breakpoints` array."] pub type r#SetDataBreakpointsResponse_1_body_breakpoints_array = r#Breakpoint ; pub type r#SetDataBreakpointsResponse_1_body_breakpoints = Vec < r#SetDataBreakpointsResponse_1_body_breakpoints_array > ; pub struct r#SetDataBreakpointsResponse_1_body { pub r#breakpoints : r#SetDataBreakpointsResponse_1_body_breakpoints } pub struct r#SetDataBreakpointsResponse_1 { pub r#body : r#SetDataBreakpointsResponse_1_body } pub struct r#SetDataBreakpointsResponse { pub r#_0 : r#SetDataBreakpointsResponse_0 , r#_1 : r#SetDataBreakpointsResponse_1 } pub type r#SetInstructionBreakpointsRequest_0 = r#Request ; # [doc = "Replaces all existing instruction breakpoints. Typically, instruction breakpoints would be set from a disassembly window. \nTo clear all instruction breakpoints, specify an empty array.\nWhen an instruction breakpoint is hit, a `stopped` event (with reason `instruction breakpoint`) is generated.\nClients should only call this request if the corresponding capability `supportsInstructionBreakpoints` is true."] pub type r#SetInstructionBreakpointsRequest_1_command = String ; pub type r#SetInstructionBreakpointsRequest_1_arguments = r#SetInstructionBreakpointsArguments ; pub struct r#SetInstructionBreakpointsRequest_1 { pub r#command : r#SetInstructionBreakpointsRequest_1_command , r#arguments : r#SetInstructionBreakpointsRequest_1_arguments } pub struct r#SetInstructionBreakpointsRequest { pub r#_0 : r#SetInstructionBreakpointsRequest_0 , r#_1 : r#SetInstructionBreakpointsRequest_1 } # [doc = "Arguments for `setInstructionBreakpoints` request"] # [doc = "The instruction references of the breakpoints"] pub type r#SetInstructionBreakpointsArguments_breakpoints_array = r#InstructionBreakpoint ; pub type r#SetInstructionBreakpointsArguments_breakpoints = Vec < r#SetInstructionBreakpointsArguments_breakpoints_array > ; pub struct r#SetInstructionBreakpointsArguments { pub r#breakpoints : r#SetInstructionBreakpointsArguments_breakpoints } pub type r#SetInstructionBreakpointsResponse_0 = r#Response ; # [doc = "Response to `setInstructionBreakpoints` request"] # [doc = "Information about the breakpoints. The array elements correspond to the elements of the `breakpoints` array."] pub type r#SetInstructionBreakpointsResponse_1_body_breakpoints_array = r#Breakpoint ; pub type r#SetInstructionBreakpointsResponse_1_body_breakpoints = Vec < r#SetInstructionBreakpointsResponse_1_body_breakpoints_array > ; pub struct r#SetInstructionBreakpointsResponse_1_body { pub r#breakpoints : r#SetInstructionBreakpointsResponse_1_body_breakpoints } pub struct r#SetInstructionBreakpointsResponse_1 { pub r#body : r#SetInstructionBreakpointsResponse_1_body } pub struct r#SetInstructionBreakpointsResponse { pub r#_0 : r#SetInstructionBreakpointsResponse_0 , r#_1 : r#SetInstructionBreakpointsResponse_1 } pub type r#ContinueRequest_0 = r#Request ; # [doc = "The request resumes execution of all threads. If the debug adapter supports single thread execution (see capability `supportsSingleThreadExecutionRequests`), setting the `singleThread` argument to true resumes only the specified thread. If not all threads were resumed, the `allThreadsContinued` attribute of the response should be set to false."] pub type r#ContinueRequest_1_command = String ; pub type r#ContinueRequest_1_arguments = r#ContinueArguments ; pub struct r#ContinueRequest_1 { pub r#command : r#ContinueRequest_1_command , r#arguments : r#ContinueRequest_1_arguments } pub struct r#ContinueRequest { pub r#_0 : r#ContinueRequest_0 , r#_1 : r#ContinueRequest_1 } # [doc = "Arguments for `continue` request."] # [doc = "Specifies the active thread. If the debug adapter supports single thread execution (see `supportsSingleThreadExecutionRequests`) and the argument `singleThread` is true, only the thread with this ID is resumed."] pub type r#ContinueArguments_threadId = i32 ; # [doc = "If this flag is true, execution is resumed only for the thread with given `threadId`."] pub type r#ContinueArguments_singleThread = bool ; pub struct r#ContinueArguments { pub r#threadId : r#ContinueArguments_threadId , r#singleThread : r#ContinueArguments_singleThread } pub type r#ContinueResponse_0 = r#Response ; # [doc = "Response to `continue` request."] # [doc = "The value true (or a missing property) signals to the client that all threads have been resumed. The value false indicates that not all threads were resumed."] pub type r#ContinueResponse_1_body_allThreadsContinued = bool ; pub struct r#ContinueResponse_1_body { pub r#allThreadsContinued : r#ContinueResponse_1_body_allThreadsContinued } pub struct r#ContinueResponse_1 { pub r#body : r#ContinueResponse_1_body } pub struct r#ContinueResponse { pub r#_0 : r#ContinueResponse_0 , r#_1 : r#ContinueResponse_1 } pub type r#NextRequest_0 = r#Request ; # [doc = "The request executes one step (in the given granularity) for the specified thread and allows all other threads to run freely by resuming them.\nIf the debug adapter supports single thread execution (see capability `supportsSingleThreadExecutionRequests`), setting the `singleThread` argument to true prevents other suspended threads from resuming.\nThe debug adapter first sends the response and then a `stopped` event (with reason `step`) after the step has completed."] pub type r#NextRequest_1_command = String ; pub type r#NextRequest_1_arguments = r#NextArguments ; pub struct r#NextRequest_1 { pub r#command : r#NextRequest_1_command , r#arguments : r#NextRequest_1_arguments } pub struct r#NextRequest { pub r#_0 : r#NextRequest_0 , r#_1 : r#NextRequest_1 } # [doc = "Arguments for `next` request."] # [doc = "Specifies the thread for which to resume execution for one step (of the given granularity)."] pub type r#NextArguments_threadId = i32 ; # [doc = "If this flag is true, all other suspended threads are not resumed."] pub type r#NextArguments_singleThread = bool ; # [doc = "Stepping granularity. If no granularity is specified, a granularity of `statement` is assumed."] pub type r#NextArguments_granularity = r#SteppingGranularity ; pub struct r#NextArguments { pub r#threadId : r#NextArguments_threadId , r#singleThread : r#NextArguments_singleThread , r#granularity : r#NextArguments_granularity } pub type r#NextResponse_0 = r#Response ; # [doc = "Response to `next` request. This is just an acknowledgement, so no body field is required."] pub struct r#NextResponse_1 { pub } pub struct r#NextResponse { pub r#_0 : r#NextResponse_0 , r#_1 : r#NextResponse_1 } pub type r#StepInRequest_0 = r#Request ; # [doc = "The request resumes the given thread to step into a function/method and allows all other threads to run freely by resuming them.\nIf the debug adapter supports single thread execution (see capability `supportsSingleThreadExecutionRequests`), setting the `singleThread` argument to true prevents other suspended threads from resuming.\nIf the request cannot step into a target, `stepIn` behaves like the `next` request.\nThe debug adapter first sends the response and then a `stopped` event (with reason `step`) after the step has completed.\nIf there are multiple function/method calls (or other targets) on the source line,\nthe argument `targetId` can be used to control into which target the `stepIn` should occur.\nThe list of possible targets for a given source line can be retrieved via the `stepInTargets` request."] pub type r#StepInRequest_1_command = String ; pub type r#StepInRequest_1_arguments = r#StepInArguments ; pub struct r#StepInRequest_1 { pub r#command : r#StepInRequest_1_command , r#arguments : r#StepInRequest_1_arguments } pub struct r#StepInRequest { pub r#_0 : r#StepInRequest_0 , r#_1 : r#StepInRequest_1 } # [doc = "Arguments for `stepIn` request."] # [doc = "Specifies the thread for which to resume execution for one step-into (of the given granularity)."] pub type r#StepInArguments_threadId = i32 ; # [doc = "If this flag is true, all other suspended threads are not resumed."] pub type r#StepInArguments_singleThread = bool ; # [doc = "Id of the target to step into."] pub type r#StepInArguments_targetId = i32 ; # [doc = "Stepping granularity. If no granularity is specified, a granularity of `statement` is assumed."] pub type r#StepInArguments_granularity = r#SteppingGranularity ; pub struct r#StepInArguments { pub r#threadId : r#StepInArguments_threadId , r#singleThread : r#StepInArguments_singleThread , r#targetId : r#StepInArguments_targetId , r#granularity : r#StepInArguments_granularity } pub type r#StepInResponse_0 = r#Response ; # [doc = "Response to `stepIn` request. This is just an acknowledgement, so no body field is required."] pub struct r#StepInResponse_1 { pub } pub struct r#StepInResponse { pub r#_0 : r#StepInResponse_0 , r#_1 : r#StepInResponse_1 } pub type r#StepOutRequest_0 = r#Request ; # [doc = "The request resumes the given thread to step out (return) from a function/method and allows all other threads to run freely by resuming them.\nIf the debug adapter supports single thread execution (see capability `supportsSingleThreadExecutionRequests`), setting the `singleThread` argument to true prevents other suspended threads from resuming.\nThe debug adapter first sends the response and then a `stopped` event (with reason `step`) after the step has completed."] pub type r#StepOutRequest_1_command = String ; pub type r#StepOutRequest_1_arguments = r#StepOutArguments ; pub struct r#StepOutRequest_1 { pub r#command : r#StepOutRequest_1_command , r#arguments : r#StepOutRequest_1_arguments } pub struct r#StepOutRequest { pub r#_0 : r#StepOutRequest_0 , r#_1 : r#StepOutRequest_1 } # [doc = "Arguments for `stepOut` request."] # [doc = "Specifies the thread for which to resume execution for one step-out (of the given granularity)."] pub type r#StepOutArguments_threadId = i32 ; # [doc = "If this flag is true, all other suspended threads are not resumed."] pub type r#StepOutArguments_singleThread = bool ; # [doc = "Stepping granularity. If no granularity is specified, a granularity of `statement` is assumed."] pub type r#StepOutArguments_granularity = r#SteppingGranularity ; pub struct r#StepOutArguments { pub r#threadId : r#StepOutArguments_threadId , r#singleThread : r#StepOutArguments_singleThread , r#granularity : r#StepOutArguments_granularity } pub type r#StepOutResponse_0 = r#Response ; # [doc = "Response to `stepOut` request. This is just an acknowledgement, so no body field is required."] pub struct r#StepOutResponse_1 { pub } pub struct r#StepOutResponse { pub r#_0 : r#StepOutResponse_0 , r#_1 : r#StepOutResponse_1 } pub type r#StepBackRequest_0 = r#Request ; # [doc = "The request executes one backward step (in the given granularity) for the specified thread and allows all other threads to run backward freely by resuming them.\nIf the debug adapter supports single thread execution (see capability `supportsSingleThreadExecutionRequests`), setting the `singleThread` argument to true prevents other suspended threads from resuming.\nThe debug adapter first sends the response and then a `stopped` event (with reason `step`) after the step has completed.\nClients should only call this request if the corresponding capability `supportsStepBack` is true."] pub type r#StepBackRequest_1_command = String ; pub type r#StepBackRequest_1_arguments = r#StepBackArguments ; pub struct r#StepBackRequest_1 { pub r#command : r#StepBackRequest_1_command , r#arguments : r#StepBackRequest_1_arguments } pub struct r#StepBackRequest { pub r#_0 : r#StepBackRequest_0 , r#_1 : r#StepBackRequest_1 } # [doc = "Arguments for `stepBack` request."] # [doc = "Specifies the thread for which to resume execution for one step backwards (of the given granularity)."] pub type r#StepBackArguments_threadId = i32 ; # [doc = "If this flag is true, all other suspended threads are not resumed."] pub type r#StepBackArguments_singleThread = bool ; # [doc = "Stepping granularity to step. If no granularity is specified, a granularity of `statement` is assumed."] pub type r#StepBackArguments_granularity = r#SteppingGranularity ; pub struct r#StepBackArguments { pub r#threadId : r#StepBackArguments_threadId , r#singleThread : r#StepBackArguments_singleThread , r#granularity : r#StepBackArguments_granularity } pub type r#StepBackResponse_0 = r#Response ; # [doc = "Response to `stepBack` request. This is just an acknowledgement, so no body field is required."] pub struct r#StepBackResponse_1 { pub } pub struct r#StepBackResponse { pub r#_0 : r#StepBackResponse_0 , r#_1 : r#StepBackResponse_1 } pub type r#ReverseContinueRequest_0 = r#Request ; # [doc = "The request resumes backward execution of all threads. If the debug adapter supports single thread execution (see capability `supportsSingleThreadExecutionRequests`), setting the `singleThread` argument to true resumes only the specified thread. If not all threads were resumed, the `allThreadsContinued` attribute of the response should be set to false.\nClients should only call this request if the corresponding capability `supportsStepBack` is true."] pub type r#ReverseContinueRequest_1_command = String ; pub type r#ReverseContinueRequest_1_arguments = r#ReverseContinueArguments ; pub struct r#ReverseContinueRequest_1 { pub r#command : r#ReverseContinueRequest_1_command , r#arguments : r#ReverseContinueRequest_1_arguments } pub struct r#ReverseContinueRequest { pub r#_0 : r#ReverseContinueRequest_0 , r#_1 : r#ReverseContinueRequest_1 } # [doc = "Arguments for `reverseContinue` request."] # [doc = "Specifies the active thread. If the debug adapter supports single thread execution (see `supportsSingleThreadExecutionRequests`) and the `singleThread` argument is true, only the thread with this ID is resumed."] pub type r#ReverseContinueArguments_threadId = i32 ; # [doc = "If this flag is true, backward execution is resumed only for the thread with given `threadId`."] pub type r#ReverseContinueArguments_singleThread = bool ; pub struct r#ReverseContinueArguments { pub r#threadId : r#ReverseContinueArguments_threadId , r#singleThread : r#ReverseContinueArguments_singleThread } pub type r#ReverseContinueResponse_0 = r#Response ; # [doc = "Response to `reverseContinue` request. This is just an acknowledgement, so no body field is required."] pub struct r#ReverseContinueResponse_1 { pub } pub struct r#ReverseContinueResponse { pub r#_0 : r#ReverseContinueResponse_0 , r#_1 : r#ReverseContinueResponse_1 } pub type r#RestartFrameRequest_0 = r#Request ; # [doc = "The request restarts execution of the specified stack frame.\nThe debug adapter first sends the response and then a `stopped` event (with reason `restart`) after the restart has completed.\nClients should only call this request if the corresponding capability `supportsRestartFrame` is true."] pub type r#RestartFrameRequest_1_command = String ; pub type r#RestartFrameRequest_1_arguments = r#RestartFrameArguments ; pub struct r#RestartFrameRequest_1 { pub r#command : r#RestartFrameRequest_1_command , r#arguments : r#RestartFrameRequest_1_arguments } pub struct r#RestartFrameRequest { pub r#_0 : r#RestartFrameRequest_0 , r#_1 : r#RestartFrameRequest_1 } # [doc = "Arguments for `restartFrame` request."] # [doc = "Restart the stack frame identified by `frameId`. The `frameId` must have been obtained in the current suspended state. See 'Lifetime of Object References' in the Overview section for details."] pub type r#RestartFrameArguments_frameId = i32 ; pub struct r#RestartFrameArguments { pub r#frameId : r#RestartFrameArguments_frameId } pub type r#RestartFrameResponse_0 = r#Response ; # [doc = "Response to `restartFrame` request. This is just an acknowledgement, so no body field is required."] pub struct r#RestartFrameResponse_1 { pub } pub struct r#RestartFrameResponse { pub r#_0 : r#RestartFrameResponse_0 , r#_1 : r#RestartFrameResponse_1 } pub type r#GotoRequest_0 = r#Request ; # [doc = "The request sets the location where the debuggee will continue to run.\nThis makes it possible to skip the execution of code or to execute code again.\nThe code between the current location and the goto target is not executed but skipped.\nThe debug adapter first sends the response and then a `stopped` event with reason `goto`.\nClients should only call this request if the corresponding capability `supportsGotoTargetsRequest` is true (because only then goto targets exist that can be passed as arguments)."] pub type r#GotoRequest_1_command = String ; pub type r#GotoRequest_1_arguments = r#GotoArguments ; pub struct r#GotoRequest_1 { pub r#command : r#GotoRequest_1_command , r#arguments : r#GotoRequest_1_arguments } pub struct r#GotoRequest { pub r#_0 : r#GotoRequest_0 , r#_1 : r#GotoRequest_1 } # [doc = "Arguments for `goto` request."] # [doc = "Set the goto target for this thread."] pub type r#GotoArguments_threadId = i32 ; # [doc = "The location where the debuggee will continue to run."] pub type r#GotoArguments_targetId = i32 ; pub struct r#GotoArguments { pub r#threadId : r#GotoArguments_threadId , r#targetId : r#GotoArguments_targetId } pub type r#GotoResponse_0 = r#Response ; # [doc = "Response to `goto` request. This is just an acknowledgement, so no body field is required."] pub struct r#GotoResponse_1 { pub } pub struct r#GotoResponse { pub r#_0 : r#GotoResponse_0 , r#_1 : r#GotoResponse_1 } pub type r#PauseRequest_0 = r#Request ; # [doc = "The request suspends the debuggee.\nThe debug adapter first sends the response and then a `stopped` event (with reason `pause`) after the thread has been paused successfully."] pub type r#PauseRequest_1_command = String ; pub type r#PauseRequest_1_arguments = r#PauseArguments ; pub struct r#PauseRequest_1 { pub r#command : r#PauseRequest_1_command , r#arguments : r#PauseRequest_1_arguments } pub struct r#PauseRequest { pub r#_0 : r#PauseRequest_0 , r#_1 : r#PauseRequest_1 } # [doc = "Arguments for `pause` request."] # [doc = "Pause execution for this thread."] pub type r#PauseArguments_threadId = i32 ; pub struct r#PauseArguments { pub r#threadId : r#PauseArguments_threadId } pub type r#PauseResponse_0 = r#Response ; # [doc = "Response to `pause` request. This is just an acknowledgement, so no body field is required."] pub struct r#PauseResponse_1 { pub } pub struct r#PauseResponse { pub r#_0 : r#PauseResponse_0 , r#_1 : r#PauseResponse_1 } pub type r#StackTraceRequest_0 = r#Request ; # [doc = "The request returns a stacktrace from the current execution state of a given thread.\nA client can request all stack frames by omitting the startFrame and levels arguments. For performance-conscious clients and if the corresponding capability `supportsDelayedStackTraceLoading` is true, stack frames can be retrieved in a piecemeal way with the `startFrame` and `levels` arguments. The response of the `stackTrace` request may contain a `totalFrames` property that hints at the total number of frames in the stack. If a client needs this total number upfront, it can issue a request for a single (first) frame and depending on the value of `totalFrames` decide how to proceed. In any case a client should be prepared to receive fewer frames than requested, which is an indication that the end of the stack has been reached."] pub type r#StackTraceRequest_1_command = String ; pub type r#StackTraceRequest_1_arguments = r#StackTraceArguments ; pub struct r#StackTraceRequest_1 { pub r#command : r#StackTraceRequest_1_command , r#arguments : r#StackTraceRequest_1_arguments } pub struct r#StackTraceRequest { pub r#_0 : r#StackTraceRequest_0 , r#_1 : r#StackTraceRequest_1 } # [doc = "Arguments for `stackTrace` request."] # [doc = "Retrieve the stacktrace for this thread."] pub type r#StackTraceArguments_threadId = i32 ; # [doc = "The index of the first frame to return; if omitted frames start at 0."] pub type r#StackTraceArguments_startFrame = i32 ; # [doc = "The maximum number of frames to return. If levels is not specified or 0, all frames are returned."] pub type r#StackTraceArguments_levels = i32 ; # [doc = "Specifies details on how to format the stack frames.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportsValueFormattingOptions` is true."] pub type r#StackTraceArguments_format = r#StackFrameFormat ; pub struct r#StackTraceArguments { pub r#threadId : r#StackTraceArguments_threadId , r#startFrame : r#StackTraceArguments_startFrame , r#levels : r#StackTraceArguments_levels , r#format : r#StackTraceArguments_format } pub type r#StackTraceResponse_0 = r#Response ; # [doc = "Response to `stackTrace` request."] # [doc = "The frames of the stack frame. If the array has length zero, there are no stack frames available.\nThis means that there is no location information available."] pub type r#StackTraceResponse_1_body_stackFrames_array = r#StackFrame ; pub type r#StackTraceResponse_1_body_stackFrames = Vec < r#StackTraceResponse_1_body_stackFrames_array > ; # [doc = "The total number of frames available in the stack. If omitted or if `totalFrames` is larger than the available frames, a client is expected to request frames until a request returns less frames than requested (which indicates the end of the stack). Returning monotonically increasing `totalFrames` values for subsequent requests can be used to enforce paging in the client."] pub type r#StackTraceResponse_1_body_totalFrames = i32 ; pub struct r#StackTraceResponse_1_body { pub r#stackFrames : r#StackTraceResponse_1_body_stackFrames , r#totalFrames : r#StackTraceResponse_1_body_totalFrames } pub struct r#StackTraceResponse_1 { pub r#body : r#StackTraceResponse_1_body } pub struct r#StackTraceResponse { pub r#_0 : r#StackTraceResponse_0 , r#_1 : r#StackTraceResponse_1 } pub type r#ScopesRequest_0 = r#Request ; # [doc = "The request returns the variable scopes for a given stack frame ID."] pub type r#ScopesRequest_1_command = String ; pub type r#ScopesRequest_1_arguments = r#ScopesArguments ; pub struct r#ScopesRequest_1 { pub r#command : r#ScopesRequest_1_command , r#arguments : r#ScopesRequest_1_arguments } pub struct r#ScopesRequest { pub r#_0 : r#ScopesRequest_0 , r#_1 : r#ScopesRequest_1 } # [doc = "Arguments for `scopes` request."] # [doc = "Retrieve the scopes for the stack frame identified by `frameId`. The `frameId` must have been obtained in the current suspended state. See 'Lifetime of Object References' in the Overview section for details."] pub type r#ScopesArguments_frameId = i32 ; pub struct r#ScopesArguments { pub r#frameId : r#ScopesArguments_frameId } pub type r#ScopesResponse_0 = r#Response ; # [doc = "Response to `scopes` request."] # [doc = "The scopes of the stack frame. If the array has length zero, there are no scopes available."] pub type r#ScopesResponse_1_body_scopes_array = r#Scope ; pub type r#ScopesResponse_1_body_scopes = Vec < r#ScopesResponse_1_body_scopes_array > ; pub struct r#ScopesResponse_1_body { pub r#scopes : r#ScopesResponse_1_body_scopes } pub struct r#ScopesResponse_1 { pub r#body : r#ScopesResponse_1_body } pub struct r#ScopesResponse { pub r#_0 : r#ScopesResponse_0 , r#_1 : r#ScopesResponse_1 } pub type r#VariablesRequest_0 = r#Request ; # [doc = "Retrieves all child variables for the given variable reference.\nA filter can be used to limit the fetched children to either named or indexed children."] pub type r#VariablesRequest_1_command = String ; pub type r#VariablesRequest_1_arguments = r#VariablesArguments ; pub struct r#VariablesRequest_1 { pub r#command : r#VariablesRequest_1_command , r#arguments : r#VariablesRequest_1_arguments } pub struct r#VariablesRequest { pub r#_0 : r#VariablesRequest_0 , r#_1 : r#VariablesRequest_1 } # [doc = "Arguments for `variables` request."] # [doc = "The variable for which to retrieve its children. The `variablesReference` must have been obtained in the current suspended state. See 'Lifetime of Object References' in the Overview section for details."] pub type r#VariablesArguments_variablesReference = i32 ; # [doc = "Filter to limit the child variables to either named or indexed. If omitted, both types are fetched."] pub type r#VariablesArguments_filter = String ; # [doc = "The index of the first variable to return; if omitted children start at 0."] pub type r#VariablesArguments_start = i32 ; # [doc = "The number of variables to return. If count is missing or 0, all variables are returned."] pub type r#VariablesArguments_count = i32 ; # [doc = "Specifies details on how to format the Variable values.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportsValueFormattingOptions` is true."] pub type r#VariablesArguments_format = r#ValueFormat ; pub struct r#VariablesArguments { pub r#variablesReference : r#VariablesArguments_variablesReference , r#filter : r#VariablesArguments_filter , r#start : r#VariablesArguments_start , r#count : r#VariablesArguments_count , r#format : r#VariablesArguments_format } pub type r#VariablesResponse_0 = r#Response ; # [doc = "Response to `variables` request."] # [doc = "All (or a range) of variables for the given variable reference."] pub type r#VariablesResponse_1_body_variables_array = r#Variable ; pub type r#VariablesResponse_1_body_variables = Vec < r#VariablesResponse_1_body_variables_array > ; pub struct r#VariablesResponse_1_body { pub r#variables : r#VariablesResponse_1_body_variables } pub struct r#VariablesResponse_1 { pub r#body : r#VariablesResponse_1_body } pub struct r#VariablesResponse { pub r#_0 : r#VariablesResponse_0 , r#_1 : r#VariablesResponse_1 } pub type r#SetVariableRequest_0 = r#Request ; # [doc = "Set the variable with the given name in the variable container to a new value. Clients should only call this request if the corresponding capability `supportsSetVariable` is true.\nIf a debug adapter implements both `setVariable` and `setExpression`, a client will only use `setExpression` if the variable has an `evaluateName` property."] pub type r#SetVariableRequest_1_command = String ; pub type r#SetVariableRequest_1_arguments = r#SetVariableArguments ; pub struct r#SetVariableRequest_1 { pub r#command : r#SetVariableRequest_1_command , r#arguments : r#SetVariableRequest_1_arguments } pub struct r#SetVariableRequest { pub r#_0 : r#SetVariableRequest_0 , r#_1 : r#SetVariableRequest_1 } # [doc = "Arguments for `setVariable` request."] # [doc = "The reference of the variable container. The `variablesReference` must have been obtained in the current suspended state. See 'Lifetime of Object References' in the Overview section for details."] pub type r#SetVariableArguments_variablesReference = i32 ; # [doc = "The name of the variable in the container."] pub type r#SetVariableArguments_name = String ; # [doc = "The value of the variable."] pub type r#SetVariableArguments_value = String ; # [doc = "Specifies details on how to format the response value."] pub type r#SetVariableArguments_format = r#ValueFormat ; pub struct r#SetVariableArguments { pub r#variablesReference : r#SetVariableArguments_variablesReference , r#name : r#SetVariableArguments_name , r#value : r#SetVariableArguments_value , r#format : r#SetVariableArguments_format } pub type r#SetVariableResponse_0 = r#Response ; # [doc = "Response to `setVariable` request."] # [doc = "The new value of the variable."] pub type r#SetVariableResponse_1_body_value = String ; # [doc = "The type of the new value. Typically shown in the UI when hovering over the value."] pub type r#SetVariableResponse_1_body_type = String ; # [doc = "If `variablesReference` is > 0, the new value is structured and its children can be retrieved by passing `variablesReference` to the `variables` request as long as execution remains suspended. See 'Lifetime of Object References' in the Overview section for details."] pub type r#SetVariableResponse_1_body_variablesReference = i32 ; # [doc = "The number of named child variables.\nThe client can use this information to present the variables in a paged UI and fetch them in chunks.\nThe value should be less than or equal to 2147483647 (2^31-1)."] pub type r#SetVariableResponse_1_body_namedVariables = i32 ; # [doc = "The number of indexed child variables.\nThe client can use this information to present the variables in a paged UI and fetch them in chunks.\nThe value should be less than or equal to 2147483647 (2^31-1)."] pub type r#SetVariableResponse_1_body_indexedVariables = i32 ; pub struct r#SetVariableResponse_1_body { pub r#value : r#SetVariableResponse_1_body_value , r#type : r#SetVariableResponse_1_body_type , r#variablesReference : r#SetVariableResponse_1_body_variablesReference , r#namedVariables : r#SetVariableResponse_1_body_namedVariables , r#indexedVariables : r#SetVariableResponse_1_body_indexedVariables } pub struct r#SetVariableResponse_1 { pub r#body : r#SetVariableResponse_1_body } pub struct r#SetVariableResponse { pub r#_0 : r#SetVariableResponse_0 , r#_1 : r#SetVariableResponse_1 } pub type r#SourceRequest_0 = r#Request ; # [doc = "The request retrieves the source code for a given source reference."] pub type r#SourceRequest_1_command = String ; pub type r#SourceRequest_1_arguments = r#SourceArguments ; pub struct r#SourceRequest_1 { pub r#command : r#SourceRequest_1_command , r#arguments : r#SourceRequest_1_arguments } pub struct r#SourceRequest { pub r#_0 : r#SourceRequest_0 , r#_1 : r#SourceRequest_1 } # [doc = "Arguments for `source` request."] # [doc = "Specifies the source content to load. Either `source.path` or `source.sourceReference` must be specified."] pub type r#SourceArguments_source = r#Source ; # [doc = "The reference to the source. This is the same as `source.sourceReference`.\nThis is provided for backward compatibility since old clients do not understand the `source` attribute."] pub type r#SourceArguments_sourceReference = i32 ; pub struct r#SourceArguments { pub r#source : r#SourceArguments_source , r#sourceReference : r#SourceArguments_sourceReference } pub type r#SourceResponse_0 = r#Response ; # [doc = "Response to `source` request."] # [doc = "Content of the source reference."] pub type r#SourceResponse_1_body_content = String ; # [doc = "Content type (MIME type) of the source."] pub type r#SourceResponse_1_body_mimeType = String ; pub struct r#SourceResponse_1_body { pub r#content : r#SourceResponse_1_body_content , r#mimeType : r#SourceResponse_1_body_mimeType } pub struct r#SourceResponse_1 { pub r#body : r#SourceResponse_1_body } pub struct r#SourceResponse { pub r#_0 : r#SourceResponse_0 , r#_1 : r#SourceResponse_1 } pub type r#ThreadsRequest_0 = r#Request ; # [doc = "The request retrieves a list of all threads."] pub type r#ThreadsRequest_1_command = String ; pub struct r#ThreadsRequest_1 { pub r#command : r#ThreadsRequest_1_command } pub struct r#ThreadsRequest { pub r#_0 : r#ThreadsRequest_0 , r#_1 : r#ThreadsRequest_1 } pub type r#ThreadsResponse_0 = r#Response ; # [doc = "Response to `threads` request."] # [doc = "All threads."] pub type r#ThreadsResponse_1_body_threads_array = r#Thread ; pub type r#ThreadsResponse_1_body_threads = Vec < r#ThreadsResponse_1_body_threads_array > ; pub struct r#ThreadsResponse_1_body { pub r#threads : r#ThreadsResponse_1_body_threads } pub struct r#ThreadsResponse_1 { pub r#body : r#ThreadsResponse_1_body } pub struct r#ThreadsResponse { pub r#_0 : r#ThreadsResponse_0 , r#_1 : r#ThreadsResponse_1 } pub type r#TerminateThreadsRequest_0 = r#Request ; # [doc = "The request terminates the threads with the given ids.\nClients should only call this request if the corresponding capability `supportsTerminateThreadsRequest` is true."] pub type r#TerminateThreadsRequest_1_command = String ; pub type r#TerminateThreadsRequest_1_arguments = r#TerminateThreadsArguments ; pub struct r#TerminateThreadsRequest_1 { pub r#command : r#TerminateThreadsRequest_1_command , r#arguments : r#TerminateThreadsRequest_1_arguments } pub struct r#TerminateThreadsRequest { pub r#_0 : r#TerminateThreadsRequest_0 , r#_1 : r#TerminateThreadsRequest_1 } # [doc = "Arguments for `terminateThreads` request."] # [doc = "Ids of threads to be terminated."] pub type r#TerminateThreadsArguments_threadIds_array = i32 ; pub type r#TerminateThreadsArguments_threadIds = Vec < r#TerminateThreadsArguments_threadIds_array > ; pub struct r#TerminateThreadsArguments { pub r#threadIds : r#TerminateThreadsArguments_threadIds } pub type r#TerminateThreadsResponse_0 = r#Response ; # [doc = "Response to `terminateThreads` request. This is just an acknowledgement, no body field is required."] pub struct r#TerminateThreadsResponse_1 { pub } pub struct r#TerminateThreadsResponse { pub r#_0 : r#TerminateThreadsResponse_0 , r#_1 : r#TerminateThreadsResponse_1 } pub type r#ModulesRequest_0 = r#Request ; # [doc = "Modules can be retrieved from the debug adapter with this request which can either return all modules or a range of modules to support paging.\nClients should only call this request if the corresponding capability `supportsModulesRequest` is true."] pub type r#ModulesRequest_1_command = String ; pub type r#ModulesRequest_1_arguments = r#ModulesArguments ; pub struct r#ModulesRequest_1 { pub r#command : r#ModulesRequest_1_command , r#arguments : r#ModulesRequest_1_arguments } pub struct r#ModulesRequest { pub r#_0 : r#ModulesRequest_0 , r#_1 : r#ModulesRequest_1 } # [doc = "Arguments for `modules` request."] # [doc = "The index of the first module to return; if omitted modules start at 0."] pub type r#ModulesArguments_startModule = i32 ; # [doc = "The number of modules to return. If `moduleCount` is not specified or 0, all modules are returned."] pub type r#ModulesArguments_moduleCount = i32 ; pub struct r#ModulesArguments { pub r#startModule : r#ModulesArguments_startModule , r#moduleCount : r#ModulesArguments_moduleCount } pub type r#ModulesResponse_0 = r#Response ; # [doc = "Response to `modules` request."] # [doc = "All modules or range of modules."] pub type r#ModulesResponse_1_body_modules_array = r#Module ; pub type r#ModulesResponse_1_body_modules = Vec < r#ModulesResponse_1_body_modules_array > ; # [doc = "The total number of modules available."] pub type r#ModulesResponse_1_body_totalModules = i32 ; pub struct r#ModulesResponse_1_body { pub r#modules : r#ModulesResponse_1_body_modules , r#totalModules : r#ModulesResponse_1_body_totalModules } pub struct r#ModulesResponse_1 { pub r#body : r#ModulesResponse_1_body } pub struct r#ModulesResponse { pub r#_0 : r#ModulesResponse_0 , r#_1 : r#ModulesResponse_1 } pub type r#LoadedSourcesRequest_0 = r#Request ; # [doc = "Retrieves the set of all sources currently loaded by the debugged process.\nClients should only call this request if the corresponding capability `supportsLoadedSourcesRequest` is true."] pub type r#LoadedSourcesRequest_1_command = String ; pub type r#LoadedSourcesRequest_1_arguments = r#LoadedSourcesArguments ; pub struct r#LoadedSourcesRequest_1 { pub r#command : r#LoadedSourcesRequest_1_command , r#arguments : r#LoadedSourcesRequest_1_arguments } pub struct r#LoadedSourcesRequest { pub r#_0 : r#LoadedSourcesRequest_0 , r#_1 : r#LoadedSourcesRequest_1 } # [doc = "Arguments for `loadedSources` request."] pub struct r#LoadedSourcesArguments { pub } pub type r#LoadedSourcesResponse_0 = r#Response ; # [doc = "Response to `loadedSources` request."] # [doc = "Set of loaded sources."] pub type r#LoadedSourcesResponse_1_body_sources_array = r#Source ; pub type r#LoadedSourcesResponse_1_body_sources = Vec < r#LoadedSourcesResponse_1_body_sources_array > ; pub struct r#LoadedSourcesResponse_1_body { pub r#sources : r#LoadedSourcesResponse_1_body_sources } pub struct r#LoadedSourcesResponse_1 { pub r#body : r#LoadedSourcesResponse_1_body } pub struct r#LoadedSourcesResponse { pub r#_0 : r#LoadedSourcesResponse_0 , r#_1 : r#LoadedSourcesResponse_1 } pub type r#EvaluateRequest_0 = r#Request ; # [doc = "Evaluates the given expression in the context of the topmost stack frame.\nThe expression has access to any variables and arguments that are in scope."] pub type r#EvaluateRequest_1_command = String ; pub type r#EvaluateRequest_1_arguments = r#EvaluateArguments ; pub struct r#EvaluateRequest_1 { pub r#command : r#EvaluateRequest_1_command , r#arguments : r#EvaluateRequest_1_arguments } pub struct r#EvaluateRequest { pub r#_0 : r#EvaluateRequest_0 , r#_1 : r#EvaluateRequest_1 } # [doc = "Arguments for `evaluate` request."] # [doc = "The expression to evaluate."] pub type r#EvaluateArguments_expression = String ; # [doc = "Evaluate the expression in the scope of this stack frame. If not specified, the expression is evaluated in the global scope."] pub type r#EvaluateArguments_frameId = i32 ; # [doc = "The context in which the evaluate request is used."] pub type r#EvaluateArguments_context = String ; # [doc = "Specifies details on how to format the result.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportsValueFormattingOptions` is true."] pub type r#EvaluateArguments_format = r#ValueFormat ; pub struct r#EvaluateArguments { pub r#expression : r#EvaluateArguments_expression , r#frameId : r#EvaluateArguments_frameId , r#context : r#EvaluateArguments_context , r#format : r#EvaluateArguments_format } pub type r#EvaluateResponse_0 = r#Response ; # [doc = "Response to `evaluate` request."] # [doc = "The result of the evaluate request."] pub type r#EvaluateResponse_1_body_result = String ; # [doc = "The type of the evaluate result.\nThis attribute should only be returned by a debug adapter if the corresponding capability `supportsVariableType` is true."] pub type r#EvaluateResponse_1_body_type = String ; # [doc = "Properties of an evaluate result that can be used to determine how to render the result in the UI."] pub type r#EvaluateResponse_1_body_presentationHint = r#VariablePresentationHint ; # [doc = "If `variablesReference` is > 0, the evaluate result is structured and its children can be retrieved by passing `variablesReference` to the `variables` request as long as execution remains suspended. See 'Lifetime of Object References' in the Overview section for details."] pub type r#EvaluateResponse_1_body_variablesReference = i32 ; # [doc = "The number of named child variables.\nThe client can use this information to present the variables in a paged UI and fetch them in chunks.\nThe value should be less than or equal to 2147483647 (2^31-1)."] pub type r#EvaluateResponse_1_body_namedVariables = i32 ; # [doc = "The number of indexed child variables.\nThe client can use this information to present the variables in a paged UI and fetch them in chunks.\nThe value should be less than or equal to 2147483647 (2^31-1)."] pub type r#EvaluateResponse_1_body_indexedVariables = i32 ; # [doc = "A memory reference to a location appropriate for this result.\nFor pointer type eval results, this is generally a reference to the memory address contained in the pointer.\nThis attribute should be returned by a debug adapter if corresponding capability `supportsMemoryReferences` is true."] pub type r#EvaluateResponse_1_body_memoryReference = String ; pub struct r#EvaluateResponse_1_body { pub r#result : r#EvaluateResponse_1_body_result , r#type : r#EvaluateResponse_1_body_type , r#presentationHint : r#EvaluateResponse_1_body_presentationHint , r#variablesReference : r#EvaluateResponse_1_body_variablesReference , r#namedVariables : r#EvaluateResponse_1_body_namedVariables , r#indexedVariables : r#EvaluateResponse_1_body_indexedVariables , r#memoryReference : r#EvaluateResponse_1_body_memoryReference } pub struct r#EvaluateResponse_1 { pub r#body : r#EvaluateResponse_1_body } pub struct r#EvaluateResponse { pub r#_0 : r#EvaluateResponse_0 , r#_1 : r#EvaluateResponse_1 } pub type r#SetExpressionRequest_0 = r#Request ; # [doc = "Evaluates the given `value` expression and assigns it to the `expression` which must be a modifiable l-value.\nThe expressions have access to any variables and arguments that are in scope of the specified frame.\nClients should only call this request if the corresponding capability `supportsSetExpression` is true.\nIf a debug adapter implements both `setExpression` and `setVariable`, a client uses `setExpression` if the variable has an `evaluateName` property."] pub type r#SetExpressionRequest_1_command = String ; pub type r#SetExpressionRequest_1_arguments = r#SetExpressionArguments ; pub struct r#SetExpressionRequest_1 { pub r#command : r#SetExpressionRequest_1_command , r#arguments : r#SetExpressionRequest_1_arguments } pub struct r#SetExpressionRequest { pub r#_0 : r#SetExpressionRequest_0 , r#_1 : r#SetExpressionRequest_1 } # [doc = "Arguments for `setExpression` request."] # [doc = "The l-value expression to assign to."] pub type r#SetExpressionArguments_expression = String ; # [doc = "The value expression to assign to the l-value expression."] pub type r#SetExpressionArguments_value = String ; # [doc = "Evaluate the expressions in the scope of this stack frame. If not specified, the expressions are evaluated in the global scope."] pub type r#SetExpressionArguments_frameId = i32 ; # [doc = "Specifies how the resulting value should be formatted."] pub type r#SetExpressionArguments_format = r#ValueFormat ; pub struct r#SetExpressionArguments { pub r#expression : r#SetExpressionArguments_expression , r#value : r#SetExpressionArguments_value , r#frameId : r#SetExpressionArguments_frameId , r#format : r#SetExpressionArguments_format } pub type r#SetExpressionResponse_0 = r#Response ; # [doc = "Response to `setExpression` request."] # [doc = "The new value of the expression."] pub type r#SetExpressionResponse_1_body_value = String ; # [doc = "The type of the value.\nThis attribute should only be returned by a debug adapter if the corresponding capability `supportsVariableType` is true."] pub type r#SetExpressionResponse_1_body_type = String ; # [doc = "Properties of a value that can be used to determine how to render the result in the UI."] pub type r#SetExpressionResponse_1_body_presentationHint = r#VariablePresentationHint ; # [doc = "If `variablesReference` is > 0, the evaluate result is structured and its children can be retrieved by passing `variablesReference` to the `variables` request as long as execution remains suspended. See 'Lifetime of Object References' in the Overview section for details."] pub type r#SetExpressionResponse_1_body_variablesReference = i32 ; # [doc = "The number of named child variables.\nThe client can use this information to present the variables in a paged UI and fetch them in chunks.\nThe value should be less than or equal to 2147483647 (2^31-1)."] pub type r#SetExpressionResponse_1_body_namedVariables = i32 ; # [doc = "The number of indexed child variables.\nThe client can use this information to present the variables in a paged UI and fetch them in chunks.\nThe value should be less than or equal to 2147483647 (2^31-1)."] pub type r#SetExpressionResponse_1_body_indexedVariables = i32 ; pub struct r#SetExpressionResponse_1_body { pub r#value : r#SetExpressionResponse_1_body_value , r#type : r#SetExpressionResponse_1_body_type , r#presentationHint : r#SetExpressionResponse_1_body_presentationHint , r#variablesReference : r#SetExpressionResponse_1_body_variablesReference , r#namedVariables : r#SetExpressionResponse_1_body_namedVariables , r#indexedVariables : r#SetExpressionResponse_1_body_indexedVariables } pub struct r#SetExpressionResponse_1 { pub r#body : r#SetExpressionResponse_1_body } pub struct r#SetExpressionResponse { pub r#_0 : r#SetExpressionResponse_0 , r#_1 : r#SetExpressionResponse_1 } pub type r#StepInTargetsRequest_0 = r#Request ; # [doc = "This request retrieves the possible step-in targets for the specified stack frame.\nThese targets can be used in the `stepIn` request.\nClients should only call this request if the corresponding capability `supportsStepInTargetsRequest` is true."] pub type r#StepInTargetsRequest_1_command = String ; pub type r#StepInTargetsRequest_1_arguments = r#StepInTargetsArguments ; pub struct r#StepInTargetsRequest_1 { pub r#command : r#StepInTargetsRequest_1_command , r#arguments : r#StepInTargetsRequest_1_arguments } pub struct r#StepInTargetsRequest { pub r#_0 : r#StepInTargetsRequest_0 , r#_1 : r#StepInTargetsRequest_1 } # [doc = "Arguments for `stepInTargets` request."] # [doc = "The stack frame for which to retrieve the possible step-in targets."] pub type r#StepInTargetsArguments_frameId = i32 ; pub struct r#StepInTargetsArguments { pub r#frameId : r#StepInTargetsArguments_frameId } pub type r#StepInTargetsResponse_0 = r#Response ; # [doc = "Response to `stepInTargets` request."] # [doc = "The possible step-in targets of the specified source location."] pub type r#StepInTargetsResponse_1_body_targets_array = r#StepInTarget ; pub type r#StepInTargetsResponse_1_body_targets = Vec < r#StepInTargetsResponse_1_body_targets_array > ; pub struct r#StepInTargetsResponse_1_body { pub r#targets : r#StepInTargetsResponse_1_body_targets } pub struct r#StepInTargetsResponse_1 { pub r#body : r#StepInTargetsResponse_1_body } pub struct r#StepInTargetsResponse { pub r#_0 : r#StepInTargetsResponse_0 , r#_1 : r#StepInTargetsResponse_1 } pub type r#GotoTargetsRequest_0 = r#Request ; # [doc = "This request retrieves the possible goto targets for the specified source location.\nThese targets can be used in the `goto` request.\nClients should only call this request if the corresponding capability `supportsGotoTargetsRequest` is true."] pub type r#GotoTargetsRequest_1_command = String ; pub type r#GotoTargetsRequest_1_arguments = r#GotoTargetsArguments ; pub struct r#GotoTargetsRequest_1 { pub r#command : r#GotoTargetsRequest_1_command , r#arguments : r#GotoTargetsRequest_1_arguments } pub struct r#GotoTargetsRequest { pub r#_0 : r#GotoTargetsRequest_0 , r#_1 : r#GotoTargetsRequest_1 } # [doc = "Arguments for `gotoTargets` request."] # [doc = "The source location for which the goto targets are determined."] pub type r#GotoTargetsArguments_source = r#Source ; # [doc = "The line location for which the goto targets are determined."] pub type r#GotoTargetsArguments_line = i32 ; # [doc = "The position within `line` for which the goto targets are determined. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#GotoTargetsArguments_column = i32 ; pub struct r#GotoTargetsArguments { pub r#source : r#GotoTargetsArguments_source , r#line : r#GotoTargetsArguments_line , r#column : r#GotoTargetsArguments_column } pub type r#GotoTargetsResponse_0 = r#Response ; # [doc = "Response to `gotoTargets` request."] # [doc = "The possible goto targets of the specified location."] pub type r#GotoTargetsResponse_1_body_targets_array = r#GotoTarget ; pub type r#GotoTargetsResponse_1_body_targets = Vec < r#GotoTargetsResponse_1_body_targets_array > ; pub struct r#GotoTargetsResponse_1_body { pub r#targets : r#GotoTargetsResponse_1_body_targets } pub struct r#GotoTargetsResponse_1 { pub r#body : r#GotoTargetsResponse_1_body } pub struct r#GotoTargetsResponse { pub r#_0 : r#GotoTargetsResponse_0 , r#_1 : r#GotoTargetsResponse_1 } pub type r#CompletionsRequest_0 = r#Request ; # [doc = "Returns a list of possible completions for a given caret position and text.\nClients should only call this request if the corresponding capability `supportsCompletionsRequest` is true."] pub type r#CompletionsRequest_1_command = String ; pub type r#CompletionsRequest_1_arguments = r#CompletionsArguments ; pub struct r#CompletionsRequest_1 { pub r#command : r#CompletionsRequest_1_command , r#arguments : r#CompletionsRequest_1_arguments } pub struct r#CompletionsRequest { pub r#_0 : r#CompletionsRequest_0 , r#_1 : r#CompletionsRequest_1 } # [doc = "Arguments for `completions` request."] # [doc = "Returns completions in the scope of this stack frame. If not specified, the completions are returned for the global scope."] pub type r#CompletionsArguments_frameId = i32 ; # [doc = "One or more source lines. Typically this is the text users have typed into the debug console before they asked for completion."] pub type r#CompletionsArguments_text = String ; # [doc = "The position within `text` for which to determine the completion proposals. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#CompletionsArguments_column = i32 ; # [doc = "A line for which to determine the completion proposals. If missing the first line of the text is assumed."] pub type r#CompletionsArguments_line = i32 ; pub struct r#CompletionsArguments { pub r#frameId : r#CompletionsArguments_frameId , r#text : r#CompletionsArguments_text , r#column : r#CompletionsArguments_column , r#line : r#CompletionsArguments_line } pub type r#CompletionsResponse_0 = r#Response ; # [doc = "Response to `completions` request."] # [doc = "The possible completions for ."] pub type r#CompletionsResponse_1_body_targets_array = r#CompletionItem ; pub type r#CompletionsResponse_1_body_targets = Vec < r#CompletionsResponse_1_body_targets_array > ; pub struct r#CompletionsResponse_1_body { pub r#targets : r#CompletionsResponse_1_body_targets } pub struct r#CompletionsResponse_1 { pub r#body : r#CompletionsResponse_1_body } pub struct r#CompletionsResponse { pub r#_0 : r#CompletionsResponse_0 , r#_1 : r#CompletionsResponse_1 } pub type r#ExceptionInfoRequest_0 = r#Request ; # [doc = "Retrieves the details of the exception that caused this event to be raised.\nClients should only call this request if the corresponding capability `supportsExceptionInfoRequest` is true."] pub type r#ExceptionInfoRequest_1_command = String ; pub type r#ExceptionInfoRequest_1_arguments = r#ExceptionInfoArguments ; pub struct r#ExceptionInfoRequest_1 { pub r#command : r#ExceptionInfoRequest_1_command , r#arguments : r#ExceptionInfoRequest_1_arguments } pub struct r#ExceptionInfoRequest { pub r#_0 : r#ExceptionInfoRequest_0 , r#_1 : r#ExceptionInfoRequest_1 } # [doc = "Arguments for `exceptionInfo` request."] # [doc = "Thread for which exception information should be retrieved."] pub type r#ExceptionInfoArguments_threadId = i32 ; pub struct r#ExceptionInfoArguments { pub r#threadId : r#ExceptionInfoArguments_threadId } pub type r#ExceptionInfoResponse_0 = r#Response ; # [doc = "Response to `exceptionInfo` request."] # [doc = "ID of the exception that was thrown."] pub type r#ExceptionInfoResponse_1_body_exceptionId = String ; # [doc = "Descriptive text for the exception."] pub type r#ExceptionInfoResponse_1_body_description = String ; # [doc = "Mode that caused the exception notification to be raised."] pub type r#ExceptionInfoResponse_1_body_breakMode = r#ExceptionBreakMode ; # [doc = "Detailed information about the exception."] pub type r#ExceptionInfoResponse_1_body_details = r#ExceptionDetails ; pub struct r#ExceptionInfoResponse_1_body { pub r#exceptionId : r#ExceptionInfoResponse_1_body_exceptionId , r#description : r#ExceptionInfoResponse_1_body_description , r#breakMode : r#ExceptionInfoResponse_1_body_breakMode , r#details : r#ExceptionInfoResponse_1_body_details } pub struct r#ExceptionInfoResponse_1 { pub r#body : r#ExceptionInfoResponse_1_body } pub struct r#ExceptionInfoResponse { pub r#_0 : r#ExceptionInfoResponse_0 , r#_1 : r#ExceptionInfoResponse_1 } pub type r#ReadMemoryRequest_0 = r#Request ; # [doc = "Reads bytes from memory at the provided location.\nClients should only call this request if the corresponding capability `supportsReadMemoryRequest` is true."] pub type r#ReadMemoryRequest_1_command = String ; pub type r#ReadMemoryRequest_1_arguments = r#ReadMemoryArguments ; pub struct r#ReadMemoryRequest_1 { pub r#command : r#ReadMemoryRequest_1_command , r#arguments : r#ReadMemoryRequest_1_arguments } pub struct r#ReadMemoryRequest { pub r#_0 : r#ReadMemoryRequest_0 , r#_1 : r#ReadMemoryRequest_1 } # [doc = "Arguments for `readMemory` request."] # [doc = "Memory reference to the base location from which data should be read."] pub type r#ReadMemoryArguments_memoryReference = String ; # [doc = "Offset (in bytes) to be applied to the reference location before reading data. Can be negative."] pub type r#ReadMemoryArguments_offset = i32 ; # [doc = "Number of bytes to read at the specified location and offset."] pub type r#ReadMemoryArguments_count = i32 ; pub struct r#ReadMemoryArguments { pub r#memoryReference : r#ReadMemoryArguments_memoryReference , r#offset : r#ReadMemoryArguments_offset , r#count : r#ReadMemoryArguments_count } pub type r#ReadMemoryResponse_0 = r#Response ; # [doc = "Response to `readMemory` request."] # [doc = "The address of the first byte of data returned.\nTreated as a hex value if prefixed with `0x`, or as a decimal value otherwise."] pub type r#ReadMemoryResponse_1_body_address = String ; # [doc = "The number of unreadable bytes encountered after the last successfully read byte.\nThis can be used to determine the number of bytes that should be skipped before a subsequent `readMemory` request succeeds."] pub type r#ReadMemoryResponse_1_body_unreadableBytes = i32 ; # [doc = "The bytes read from memory, encoded using base64. If the decoded length of `data` is less than the requested `count` in the original `readMemory` request, and `unreadableBytes` is zero or omitted, then the client should assume it's reached the end of readable memory."] pub type r#ReadMemoryResponse_1_body_data = String ; pub struct r#ReadMemoryResponse_1_body { pub r#address : r#ReadMemoryResponse_1_body_address , r#unreadableBytes : r#ReadMemoryResponse_1_body_unreadableBytes , r#data : r#ReadMemoryResponse_1_body_data } pub struct r#ReadMemoryResponse_1 { pub r#body : r#ReadMemoryResponse_1_body } pub struct r#ReadMemoryResponse { pub r#_0 : r#ReadMemoryResponse_0 , r#_1 : r#ReadMemoryResponse_1 } pub type r#WriteMemoryRequest_0 = r#Request ; # [doc = "Writes bytes to memory at the provided location.\nClients should only call this request if the corresponding capability `supportsWriteMemoryRequest` is true."] pub type r#WriteMemoryRequest_1_command = String ; pub type r#WriteMemoryRequest_1_arguments = r#WriteMemoryArguments ; pub struct r#WriteMemoryRequest_1 { pub r#command : r#WriteMemoryRequest_1_command , r#arguments : r#WriteMemoryRequest_1_arguments } pub struct r#WriteMemoryRequest { pub r#_0 : r#WriteMemoryRequest_0 , r#_1 : r#WriteMemoryRequest_1 } # [doc = "Arguments for `writeMemory` request."] # [doc = "Memory reference to the base location to which data should be written."] pub type r#WriteMemoryArguments_memoryReference = String ; # [doc = "Offset (in bytes) to be applied to the reference location before writing data. Can be negative."] pub type r#WriteMemoryArguments_offset = i32 ; # [doc = "Property to control partial writes. If true, the debug adapter should attempt to write memory even if the entire memory region is not writable. In such a case the debug adapter should stop after hitting the first byte of memory that cannot be written and return the number of bytes written in the response via the `offset` and `bytesWritten` properties.\nIf false or missing, a debug adapter should attempt to verify the region is writable before writing, and fail the response if it is not."] pub type r#WriteMemoryArguments_allowPartial = bool ; # [doc = "Bytes to write, encoded using base64."] pub type r#WriteMemoryArguments_data = String ; pub struct r#WriteMemoryArguments { pub r#memoryReference : r#WriteMemoryArguments_memoryReference , r#offset : r#WriteMemoryArguments_offset , r#allowPartial : r#WriteMemoryArguments_allowPartial , r#data : r#WriteMemoryArguments_data } pub type r#WriteMemoryResponse_0 = r#Response ; # [doc = "Response to `writeMemory` request."] # [doc = "Property that should be returned when `allowPartial` is true to indicate the offset of the first byte of data successfully written. Can be negative."] pub type r#WriteMemoryResponse_1_body_offset = i32 ; # [doc = "Property that should be returned when `allowPartial` is true to indicate the number of bytes starting from address that were successfully written."] pub type r#WriteMemoryResponse_1_body_bytesWritten = i32 ; pub struct r#WriteMemoryResponse_1_body { pub r#offset : r#WriteMemoryResponse_1_body_offset , r#bytesWritten : r#WriteMemoryResponse_1_body_bytesWritten } pub struct r#WriteMemoryResponse_1 { pub r#body : r#WriteMemoryResponse_1_body } pub struct r#WriteMemoryResponse { pub r#_0 : r#WriteMemoryResponse_0 , r#_1 : r#WriteMemoryResponse_1 } pub type r#DisassembleRequest_0 = r#Request ; # [doc = "Disassembles code stored at the provided location.\nClients should only call this request if the corresponding capability `supportsDisassembleRequest` is true."] pub type r#DisassembleRequest_1_command = String ; pub type r#DisassembleRequest_1_arguments = r#DisassembleArguments ; pub struct r#DisassembleRequest_1 { pub r#command : r#DisassembleRequest_1_command , r#arguments : r#DisassembleRequest_1_arguments } pub struct r#DisassembleRequest { pub r#_0 : r#DisassembleRequest_0 , r#_1 : r#DisassembleRequest_1 } # [doc = "Arguments for `disassemble` request."] # [doc = "Memory reference to the base location containing the instructions to disassemble."] pub type r#DisassembleArguments_memoryReference = String ; # [doc = "Offset (in bytes) to be applied to the reference location before disassembling. Can be negative."] pub type r#DisassembleArguments_offset = i32 ; # [doc = "Offset (in instructions) to be applied after the byte offset (if any) before disassembling. Can be negative."] pub type r#DisassembleArguments_instructionOffset = i32 ; # [doc = "Number of instructions to disassemble starting at the specified location and offset.\nAn adapter must return exactly this number of instructions - any unavailable instructions should be replaced with an implementation-defined 'invalid instruction' value."] pub type r#DisassembleArguments_instructionCount = i32 ; # [doc = "If true, the adapter should attempt to resolve memory addresses and other values to symbolic names."] pub type r#DisassembleArguments_resolveSymbols = bool ; pub struct r#DisassembleArguments { pub r#memoryReference : r#DisassembleArguments_memoryReference , r#offset : r#DisassembleArguments_offset , r#instructionOffset : r#DisassembleArguments_instructionOffset , r#instructionCount : r#DisassembleArguments_instructionCount , r#resolveSymbols : r#DisassembleArguments_resolveSymbols } pub type r#DisassembleResponse_0 = r#Response ; # [doc = "Response to `disassemble` request."] # [doc = "The list of disassembled instructions."] pub type r#DisassembleResponse_1_body_instructions_array = r#DisassembledInstruction ; pub type r#DisassembleResponse_1_body_instructions = Vec < r#DisassembleResponse_1_body_instructions_array > ; pub struct r#DisassembleResponse_1_body { pub r#instructions : r#DisassembleResponse_1_body_instructions } pub struct r#DisassembleResponse_1 { pub r#body : r#DisassembleResponse_1_body } pub struct r#DisassembleResponse { pub r#_0 : r#DisassembleResponse_0 , r#_1 : r#DisassembleResponse_1 } # [doc = "Types"] # [doc = "Information about the capabilities of a debug adapter."] # [doc = "The debug adapter supports the `configurationDone` request."] pub type r#Capabilities_supportsConfigurationDoneRequest = bool ; # [doc = "The debug adapter supports function breakpoints."] pub type r#Capabilities_supportsFunctionBreakpoints = bool ; # [doc = "The debug adapter supports conditional breakpoints."] pub type r#Capabilities_supportsConditionalBreakpoints = bool ; # [doc = "The debug adapter supports breakpoints that break execution after a specified number of hits."] pub type r#Capabilities_supportsHitConditionalBreakpoints = bool ; # [doc = "The debug adapter supports a (side effect free) `evaluate` request for data hovers."] pub type r#Capabilities_supportsEvaluateForHovers = bool ; # [doc = "Available exception filter options for the `setExceptionBreakpoints` request."] pub type r#Capabilities_exceptionBreakpointFilters_array = r#ExceptionBreakpointsFilter ; pub type r#Capabilities_exceptionBreakpointFilters = Vec < r#Capabilities_exceptionBreakpointFilters_array > ; # [doc = "The debug adapter supports stepping back via the `stepBack` and `reverseContinue` requests."] pub type r#Capabilities_supportsStepBack = bool ; # [doc = "The debug adapter supports setting a variable to a value."] pub type r#Capabilities_supportsSetVariable = bool ; # [doc = "The debug adapter supports restarting a frame."] pub type r#Capabilities_supportsRestartFrame = bool ; # [doc = "The debug adapter supports the `gotoTargets` request."] pub type r#Capabilities_supportsGotoTargetsRequest = bool ; # [doc = "The debug adapter supports the `stepInTargets` request."] pub type r#Capabilities_supportsStepInTargetsRequest = bool ; # [doc = "The debug adapter supports the `completions` request."] pub type r#Capabilities_supportsCompletionsRequest = bool ; # [doc = "The set of characters that should trigger completion in a REPL. If not specified, the UI should assume the `.` character."] pub type r#Capabilities_completionTriggerCharacters_array = String ; pub type r#Capabilities_completionTriggerCharacters = Vec < r#Capabilities_completionTriggerCharacters_array > ; # [doc = "The debug adapter supports the `modules` request."] pub type r#Capabilities_supportsModulesRequest = bool ; # [doc = "The set of additional module information exposed by the debug adapter."] pub type r#Capabilities_additionalModuleColumns_array = r#ColumnDescriptor ; pub type r#Capabilities_additionalModuleColumns = Vec < r#Capabilities_additionalModuleColumns_array > ; # [doc = "Checksum algorithms supported by the debug adapter."] pub type r#Capabilities_supportedChecksumAlgorithms_array = r#ChecksumAlgorithm ; pub type r#Capabilities_supportedChecksumAlgorithms = Vec < r#Capabilities_supportedChecksumAlgorithms_array > ; # [doc = "The debug adapter supports the `restart` request. In this case a client should not implement `restart` by terminating and relaunching the adapter but by calling the `restart` request."] pub type r#Capabilities_supportsRestartRequest = bool ; # [doc = "The debug adapter supports `exceptionOptions` on the `setExceptionBreakpoints` request."] pub type r#Capabilities_supportsExceptionOptions = bool ; # [doc = "The debug adapter supports a `format` attribute on the `stackTrace`, `variables`, and `evaluate` requests."] pub type r#Capabilities_supportsValueFormattingOptions = bool ; # [doc = "The debug adapter supports the `exceptionInfo` request."] pub type r#Capabilities_supportsExceptionInfoRequest = bool ; # [doc = "The debug adapter supports the `terminateDebuggee` attribute on the `disconnect` request."] pub type r#Capabilities_supportTerminateDebuggee = bool ; # [doc = "The debug adapter supports the `suspendDebuggee` attribute on the `disconnect` request."] pub type r#Capabilities_supportSuspendDebuggee = bool ; # [doc = "The debug adapter supports the delayed loading of parts of the stack, which requires that both the `startFrame` and `levels` arguments and the `totalFrames` result of the `stackTrace` request are supported."] pub type r#Capabilities_supportsDelayedStackTraceLoading = bool ; # [doc = "The debug adapter supports the `loadedSources` request."] pub type r#Capabilities_supportsLoadedSourcesRequest = bool ; # [doc = "The debug adapter supports log points by interpreting the `logMessage` attribute of the `SourceBreakpoint`."] pub type r#Capabilities_supportsLogPoints = bool ; # [doc = "The debug adapter supports the `terminateThreads` request."] pub type r#Capabilities_supportsTerminateThreadsRequest = bool ; # [doc = "The debug adapter supports the `setExpression` request."] pub type r#Capabilities_supportsSetExpression = bool ; # [doc = "The debug adapter supports the `terminate` request."] pub type r#Capabilities_supportsTerminateRequest = bool ; # [doc = "The debug adapter supports data breakpoints."] pub type r#Capabilities_supportsDataBreakpoints = bool ; # [doc = "The debug adapter supports the `readMemory` request."] pub type r#Capabilities_supportsReadMemoryRequest = bool ; # [doc = "The debug adapter supports the `writeMemory` request."] pub type r#Capabilities_supportsWriteMemoryRequest = bool ; # [doc = "The debug adapter supports the `disassemble` request."] pub type r#Capabilities_supportsDisassembleRequest = bool ; # [doc = "The debug adapter supports the `cancel` request."] pub type r#Capabilities_supportsCancelRequest = bool ; # [doc = "The debug adapter supports the `breakpointLocations` request."] pub type r#Capabilities_supportsBreakpointLocationsRequest = bool ; # [doc = "The debug adapter supports the `clipboard` context value in the `evaluate` request."] pub type r#Capabilities_supportsClipboardContext = bool ; # [doc = "The debug adapter supports stepping granularities (argument `granularity`) for the stepping requests."] pub type r#Capabilities_supportsSteppingGranularity = bool ; # [doc = "The debug adapter supports adding breakpoints based on instruction references."] pub type r#Capabilities_supportsInstructionBreakpoints = bool ; # [doc = "The debug adapter supports `filterOptions` as an argument on the `setExceptionBreakpoints` request."] pub type r#Capabilities_supportsExceptionFilterOptions = bool ; # [doc = "The debug adapter supports the `singleThread` property on the execution requests (`continue`, `next`, `stepIn`, `stepOut`, `reverseContinue`, `stepBack`)."] pub type r#Capabilities_supportsSingleThreadExecutionRequests = bool ; pub struct r#Capabilities { pub r#supportsConfigurationDoneRequest : r#Capabilities_supportsConfigurationDoneRequest , r#supportsFunctionBreakpoints : r#Capabilities_supportsFunctionBreakpoints , r#supportsConditionalBreakpoints : r#Capabilities_supportsConditionalBreakpoints , r#supportsHitConditionalBreakpoints : r#Capabilities_supportsHitConditionalBreakpoints , r#supportsEvaluateForHovers : r#Capabilities_supportsEvaluateForHovers , r#exceptionBreakpointFilters : r#Capabilities_exceptionBreakpointFilters , r#supportsStepBack : r#Capabilities_supportsStepBack , r#supportsSetVariable : r#Capabilities_supportsSetVariable , r#supportsRestartFrame : r#Capabilities_supportsRestartFrame , r#supportsGotoTargetsRequest : r#Capabilities_supportsGotoTargetsRequest , r#supportsStepInTargetsRequest : r#Capabilities_supportsStepInTargetsRequest , r#supportsCompletionsRequest : r#Capabilities_supportsCompletionsRequest , r#completionTriggerCharacters : r#Capabilities_completionTriggerCharacters , r#supportsModulesRequest : r#Capabilities_supportsModulesRequest , r#additionalModuleColumns : r#Capabilities_additionalModuleColumns , r#supportedChecksumAlgorithms : r#Capabilities_supportedChecksumAlgorithms , r#supportsRestartRequest : r#Capabilities_supportsRestartRequest , r#supportsExceptionOptions : r#Capabilities_supportsExceptionOptions , r#supportsValueFormattingOptions : r#Capabilities_supportsValueFormattingOptions , r#supportsExceptionInfoRequest : r#Capabilities_supportsExceptionInfoRequest , r#supportTerminateDebuggee : r#Capabilities_supportTerminateDebuggee , r#supportSuspendDebuggee : r#Capabilities_supportSuspendDebuggee , r#supportsDelayedStackTraceLoading : r#Capabilities_supportsDelayedStackTraceLoading , r#supportsLoadedSourcesRequest : r#Capabilities_supportsLoadedSourcesRequest , r#supportsLogPoints : r#Capabilities_supportsLogPoints , r#supportsTerminateThreadsRequest : r#Capabilities_supportsTerminateThreadsRequest , r#supportsSetExpression : r#Capabilities_supportsSetExpression , r#supportsTerminateRequest : r#Capabilities_supportsTerminateRequest , r#supportsDataBreakpoints : r#Capabilities_supportsDataBreakpoints , r#supportsReadMemoryRequest : r#Capabilities_supportsReadMemoryRequest , r#supportsWriteMemoryRequest : r#Capabilities_supportsWriteMemoryRequest , r#supportsDisassembleRequest : r#Capabilities_supportsDisassembleRequest , r#supportsCancelRequest : r#Capabilities_supportsCancelRequest , r#supportsBreakpointLocationsRequest : r#Capabilities_supportsBreakpointLocationsRequest , r#supportsClipboardContext : r#Capabilities_supportsClipboardContext , r#supportsSteppingGranularity : r#Capabilities_supportsSteppingGranularity , r#supportsInstructionBreakpoints : r#Capabilities_supportsInstructionBreakpoints , r#supportsExceptionFilterOptions : r#Capabilities_supportsExceptionFilterOptions , r#supportsSingleThreadExecutionRequests : r#Capabilities_supportsSingleThreadExecutionRequests } # [doc = "An `ExceptionBreakpointsFilter` is shown in the UI as an filter option for configuring how exceptions are dealt with."] # [doc = "The internal ID of the filter option. This value is passed to the `setExceptionBreakpoints` request."] pub type r#ExceptionBreakpointsFilter_filter = String ; # [doc = "The name of the filter option. This is shown in the UI."] pub type r#ExceptionBreakpointsFilter_label = String ; # [doc = "A help text providing additional information about the exception filter. This string is typically shown as a hover and can be translated."] pub type r#ExceptionBreakpointsFilter_description = String ; # [doc = "Initial value of the filter option. If not specified a value false is assumed."] pub type r#ExceptionBreakpointsFilter_default = bool ; # [doc = "Controls whether a condition can be specified for this filter option. If false or missing, a condition can not be set."] pub type r#ExceptionBreakpointsFilter_supportsCondition = bool ; # [doc = "A help text providing information about the condition. This string is shown as the placeholder text for a text box and can be translated."] pub type r#ExceptionBreakpointsFilter_conditionDescription = String ; pub struct r#ExceptionBreakpointsFilter { pub r#filter : r#ExceptionBreakpointsFilter_filter , r#label : r#ExceptionBreakpointsFilter_label , r#description : r#ExceptionBreakpointsFilter_description , r#default : r#ExceptionBreakpointsFilter_default , r#supportsCondition : r#ExceptionBreakpointsFilter_supportsCondition , r#conditionDescription : r#ExceptionBreakpointsFilter_conditionDescription } # [doc = "A structured message object. Used to return errors from requests."] # [doc = "Unique (within a debug adapter implementation) identifier for the message. The purpose of these error IDs is to help extension authors that have the requirement that every user visible error message needs a corresponding error number, so that users or customer support can find information about the specific error more easily."] pub type r#Message_id = i32 ; # [doc = "A format string for the message. Embedded variables have the form `{name}`.\nIf variable name starts with an underscore character, the variable does not contain user data (PII) and can be safely used for telemetry purposes."] pub type r#Message_format = String ; # [doc = "An object used as a dictionary for looking up the variables in the format string."] pub struct r#Message_variables { pub } # [doc = "If true send to telemetry."] pub type r#Message_sendTelemetry = bool ; # [doc = "If true show user."] pub type r#Message_showUser = bool ; # [doc = "A url where additional information about this message can be found."] pub type r#Message_url = String ; # [doc = "A label that is presented to the user as the UI for opening the url."] pub type r#Message_urlLabel = String ; pub struct r#Message { pub r#id : r#Message_id , r#format : r#Message_format , r#variables : r#Message_variables , r#sendTelemetry : r#Message_sendTelemetry , r#showUser : r#Message_showUser , r#url : r#Message_url , r#urlLabel : r#Message_urlLabel } # [doc = "A Module object represents a row in the modules view.\nThe `id` attribute identifies a module in the modules view and is used in a `module` event for identifying a module for adding, updating or deleting.\nThe `name` attribute is used to minimally render the module in the UI.\n\nAdditional attributes can be added to the module. They show up in the module view if they have a corresponding `ColumnDescriptor`.\n\nTo avoid an unnecessary proliferation of additional attributes with similar semantics but different names, we recommend to re-use attributes from the 'recommended' list below first, and only introduce new attributes if nothing appropriate could be found."] # [doc = "Unique identifier for the module."] pub enum r#Module_id { } # [doc = "A name of the module."] pub type r#Module_name = String ; # [doc = "Logical full path to the module. The exact definition is implementation defined, but usually this would be a full path to the on-disk file for the module."] pub type r#Module_path = String ; # [doc = "True if the module is optimized."] pub type r#Module_isOptimized = bool ; # [doc = "True if the module is considered 'user code' by a debugger that supports 'Just My Code'."] pub type r#Module_isUserCode = bool ; # [doc = "Version of Module."] pub type r#Module_version = String ; # [doc = "User-understandable description of if symbols were found for the module (ex: 'Symbols Loaded', 'Symbols not found', etc.)"] pub type r#Module_symbolStatus = String ; # [doc = "Logical full path to the symbol file. The exact definition is implementation defined."] pub type r#Module_symbolFilePath = String ; # [doc = "Module created or modified, encoded as a RFC 3339 timestamp."] pub type r#Module_dateTimeStamp = String ; # [doc = "Address range covered by this module."] pub type r#Module_addressRange = String ; pub struct r#Module { pub r#id : r#Module_id , r#name : r#Module_name , r#path : r#Module_path , r#isOptimized : r#Module_isOptimized , r#isUserCode : r#Module_isUserCode , r#version : r#Module_version , r#symbolStatus : r#Module_symbolStatus , r#symbolFilePath : r#Module_symbolFilePath , r#dateTimeStamp : r#Module_dateTimeStamp , r#addressRange : r#Module_addressRange } # [doc = "A `ColumnDescriptor` specifies what module attribute to show in a column of the modules view, how to format it,\nand what the column's label should be.\nIt is only used if the underlying UI actually supports this level of customization."] # [doc = "Name of the attribute rendered in this column."] pub type r#ColumnDescriptor_attributeName = String ; # [doc = "Header UI label of column."] pub type r#ColumnDescriptor_label = String ; # [doc = "Format to use for the rendered values in this column. TBD how the format strings looks like."] pub type r#ColumnDescriptor_format = String ; # [doc = "Datatype of values in this column. Defaults to `string` if not specified."] pub type r#ColumnDescriptor_type = String ; # [doc = "Width of this column in characters (hint only)."] pub type r#ColumnDescriptor_width = i32 ; pub struct r#ColumnDescriptor { pub r#attributeName : r#ColumnDescriptor_attributeName , r#label : r#ColumnDescriptor_label , r#format : r#ColumnDescriptor_format , r#type : r#ColumnDescriptor_type , r#width : r#ColumnDescriptor_width } # [doc = "The ModulesViewDescriptor is the container for all declarative configuration options of a module view.\nFor now it only specifies the columns to be shown in the modules view."] pub type r#ModulesViewDescriptor_columns_array = r#ColumnDescriptor ; pub type r#ModulesViewDescriptor_columns = Vec < r#ModulesViewDescriptor_columns_array > ; pub struct r#ModulesViewDescriptor { pub r#columns : r#ModulesViewDescriptor_columns } # [doc = "A Thread"] # [doc = "Unique identifier for the thread."] pub type r#Thread_id = i32 ; # [doc = "The name of the thread."] pub type r#Thread_name = String ; pub struct r#Thread { pub r#id : r#Thread_id , r#name : r#Thread_name } # [doc = "A `Source` is a descriptor for source code.\nIt is returned from the debug adapter as part of a `StackFrame` and it is used by clients when specifying breakpoints."] # [doc = "The short name of the source. Every source returned from the debug adapter has a name.\nWhen sending a source to the debug adapter this name is optional."] pub type r#Source_name = String ; # [doc = "The path of the source to be shown in the UI.\nIt is only used to locate and load the content of the source if no `sourceReference` is specified (or its value is 0)."] pub type r#Source_path = String ; # [doc = "If the value > 0 the contents of the source must be retrieved through the `source` request (even if a path is specified).\nSince a `sourceReference` is only valid for a session, it can not be used to persist a source.\nThe value should be less than or equal to 2147483647 (2^31-1)."] pub type r#Source_sourceReference = i32 ; # [doc = "A hint for how to present the source in the UI.\nA value of `deemphasize` can be used to indicate that the source is not available or that it is skipped on stepping."] pub type r#Source_presentationHint = String ; # [doc = "The origin of this source. For example, 'internal module', 'inlined content from source map', etc."] pub type r#Source_origin = String ; # [doc = "A list of sources that are related to this source. These may be the source that generated this source."] pub type r#Source_sources_array = r#Source ; pub type r#Source_sources = Vec < r#Source_sources_array > ; # [doc = "Additional data that a debug adapter might want to loop through the client.\nThe client should leave the data intact and persist it across sessions. The client should not interpret the data."] pub enum r#Source_adapterData { } # [doc = "The checksums associated with this file."] pub type r#Source_checksums_array = r#Checksum ; pub type r#Source_checksums = Vec < r#Source_checksums_array > ; pub struct r#Source { pub r#name : r#Source_name , r#path : r#Source_path , r#sourceReference : r#Source_sourceReference , r#presentationHint : r#Source_presentationHint , r#origin : r#Source_origin , r#sources : r#Source_sources , r#adapterData : r#Source_adapterData , r#checksums : r#Source_checksums } # [doc = "A Stackframe contains the source location."] # [doc = "An identifier for the stack frame. It must be unique across all threads.\nThis id can be used to retrieve the scopes of the frame with the `scopes` request or to restart the execution of a stack frame."] pub type r#StackFrame_id = i32 ; # [doc = "The name of the stack frame, typically a method name."] pub type r#StackFrame_name = String ; # [doc = "The source of the frame."] pub type r#StackFrame_source = r#Source ; # [doc = "The line within the source of the frame. If the source attribute is missing or doesn't exist, `line` is 0 and should be ignored by the client."] pub type r#StackFrame_line = i32 ; # [doc = "Start position of the range covered by the stack frame. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based. If attribute `source` is missing or doesn't exist, `column` is 0 and should be ignored by the client."] pub type r#StackFrame_column = i32 ; # [doc = "The end line of the range covered by the stack frame."] pub type r#StackFrame_endLine = i32 ; # [doc = "End position of the range covered by the stack frame. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#StackFrame_endColumn = i32 ; # [doc = "Indicates whether this frame can be restarted with the `restart` request. Clients should only use this if the debug adapter supports the `restart` request and the corresponding capability `supportsRestartRequest` is true."] pub type r#StackFrame_canRestart = bool ; # [doc = "A memory reference for the current instruction pointer in this frame."] pub type r#StackFrame_instructionPointerReference = String ; # [doc = "The module associated with this frame, if any."] pub enum r#StackFrame_moduleId { } # [doc = "A hint for how to present this frame in the UI.\nA value of `label` can be used to indicate that the frame is an artificial frame that is used as a visual label or separator. A value of `subtle` can be used to change the appearance of a frame in a 'subtle' way."] pub type r#StackFrame_presentationHint = String ; pub struct r#StackFrame { pub r#id : r#StackFrame_id , r#name : r#StackFrame_name , r#source : r#StackFrame_source , r#line : r#StackFrame_line , r#column : r#StackFrame_column , r#endLine : r#StackFrame_endLine , r#endColumn : r#StackFrame_endColumn , r#canRestart : r#StackFrame_canRestart , r#instructionPointerReference : r#StackFrame_instructionPointerReference , r#moduleId : r#StackFrame_moduleId , r#presentationHint : r#StackFrame_presentationHint } # [doc = "A `Scope` is a named container for variables. Optionally a scope can map to a source or a range within a source."] # [doc = "Name of the scope such as 'Arguments', 'Locals', or 'Registers'. This string is shown in the UI as is and can be translated."] pub type r#Scope_name = String ; # [doc = "A hint for how to present this scope in the UI. If this attribute is missing, the scope is shown with a generic UI."] pub type r#Scope_presentationHint = String ; # [doc = "The variables of this scope can be retrieved by passing the value of `variablesReference` to the `variables` request as long as execution remains suspended. See 'Lifetime of Object References' in the Overview section for details."] pub type r#Scope_variablesReference = i32 ; # [doc = "The number of named variables in this scope.\nThe client can use this information to present the variables in a paged UI and fetch them in chunks."] pub type r#Scope_namedVariables = i32 ; # [doc = "The number of indexed variables in this scope.\nThe client can use this information to present the variables in a paged UI and fetch them in chunks."] pub type r#Scope_indexedVariables = i32 ; # [doc = "If true, the number of variables in this scope is large or expensive to retrieve."] pub type r#Scope_expensive = bool ; # [doc = "The source for this scope."] pub type r#Scope_source = r#Source ; # [doc = "The start line of the range covered by this scope."] pub type r#Scope_line = i32 ; # [doc = "Start position of the range covered by the scope. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#Scope_column = i32 ; # [doc = "The end line of the range covered by this scope."] pub type r#Scope_endLine = i32 ; # [doc = "End position of the range covered by the scope. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#Scope_endColumn = i32 ; pub struct r#Scope { pub r#name : r#Scope_name , r#presentationHint : r#Scope_presentationHint , r#variablesReference : r#Scope_variablesReference , r#namedVariables : r#Scope_namedVariables , r#indexedVariables : r#Scope_indexedVariables , r#expensive : r#Scope_expensive , r#source : r#Scope_source , r#line : r#Scope_line , r#column : r#Scope_column , r#endLine : r#Scope_endLine , r#endColumn : r#Scope_endColumn } # [doc = "A Variable is a name/value pair.\nThe `type` attribute is shown if space permits or when hovering over the variable's name.\nThe `kind` attribute is used to render additional properties of the variable, e.g. different icons can be used to indicate that a variable is public or private.\nIf the value is structured (has children), a handle is provided to retrieve the children with the `variables` request.\nIf the number of named or indexed children is large, the numbers should be returned via the `namedVariables` and `indexedVariables` attributes.\nThe client can use this information to present the children in a paged UI and fetch them in chunks."] # [doc = "The variable's name."] pub type r#Variable_name = String ; # [doc = "The variable's value.\nThis can be a multi-line text, e.g. for a function the body of a function.\nFor structured variables (which do not have a simple value), it is recommended to provide a one-line representation of the structured object. This helps to identify the structured object in the collapsed state when its children are not yet visible.\nAn empty string can be used if no value should be shown in the UI."] pub type r#Variable_value = String ; # [doc = "The type of the variable's value. Typically shown in the UI when hovering over the value.\nThis attribute should only be returned by a debug adapter if the corresponding capability `supportsVariableType` is true."] pub type r#Variable_type = String ; # [doc = "Properties of a variable that can be used to determine how to render the variable in the UI."] pub type r#Variable_presentationHint = r#VariablePresentationHint ; # [doc = "The evaluatable name of this variable which can be passed to the `evaluate` request to fetch the variable's value."] pub type r#Variable_evaluateName = String ; # [doc = "If `variablesReference` is > 0, the variable is structured and its children can be retrieved by passing `variablesReference` to the `variables` request as long as execution remains suspended. See 'Lifetime of Object References' in the Overview section for details."] pub type r#Variable_variablesReference = i32 ; # [doc = "The number of named child variables.\nThe client can use this information to present the children in a paged UI and fetch them in chunks."] pub type r#Variable_namedVariables = i32 ; # [doc = "The number of indexed child variables.\nThe client can use this information to present the children in a paged UI and fetch them in chunks."] pub type r#Variable_indexedVariables = i32 ; # [doc = "The memory reference for the variable if the variable represents executable code, such as a function pointer.\nThis attribute is only required if the corresponding capability `supportsMemoryReferences` is true."] pub type r#Variable_memoryReference = String ; pub struct r#Variable { pub r#name : r#Variable_name , r#value : r#Variable_value , r#type : r#Variable_type , r#presentationHint : r#Variable_presentationHint , r#evaluateName : r#Variable_evaluateName , r#variablesReference : r#Variable_variablesReference , r#namedVariables : r#Variable_namedVariables , r#indexedVariables : r#Variable_indexedVariables , r#memoryReference : r#Variable_memoryReference } # [doc = "Properties of a variable that can be used to determine how to render the variable in the UI."] # [doc = "The kind of variable. Before introducing additional values, try to use the listed values."] pub type r#VariablePresentationHint_kind = String ; # [doc = "Set of attributes represented as an array of strings. Before introducing additional values, try to use the listed values."] pub type r#VariablePresentationHint_attributes_array = String ; pub type r#VariablePresentationHint_attributes = Vec < r#VariablePresentationHint_attributes_array > ; # [doc = "Visibility of variable. Before introducing additional values, try to use the listed values."] pub type r#VariablePresentationHint_visibility = String ; # [doc = "If true, clients can present the variable with a UI that supports a specific gesture to trigger its evaluation.\nThis mechanism can be used for properties that require executing code when retrieving their value and where the code execution can be expensive and/or produce side-effects. A typical example are properties based on a getter function.\nPlease note that in addition to the `lazy` flag, the variable's `variablesReference` is expected to refer to a variable that will provide the value through another `variable` request."] pub type r#VariablePresentationHint_lazy = bool ; pub struct r#VariablePresentationHint { pub r#kind : r#VariablePresentationHint_kind , r#attributes : r#VariablePresentationHint_attributes , r#visibility : r#VariablePresentationHint_visibility , r#lazy : r#VariablePresentationHint_lazy } # [doc = "Properties of a breakpoint location returned from the `breakpointLocations` request."] # [doc = "Start line of breakpoint location."] pub type r#BreakpointLocation_line = i32 ; # [doc = "The start position of a breakpoint location. Position is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#BreakpointLocation_column = i32 ; # [doc = "The end line of breakpoint location if the location covers a range."] pub type r#BreakpointLocation_endLine = i32 ; # [doc = "The end position of a breakpoint location (if the location covers a range). Position is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#BreakpointLocation_endColumn = i32 ; pub struct r#BreakpointLocation { pub r#line : r#BreakpointLocation_line , r#column : r#BreakpointLocation_column , r#endLine : r#BreakpointLocation_endLine , r#endColumn : r#BreakpointLocation_endColumn } # [doc = "Properties of a breakpoint or logpoint passed to the `setBreakpoints` request."] # [doc = "The source line of the breakpoint or logpoint."] pub type r#SourceBreakpoint_line = i32 ; # [doc = "Start position within source line of the breakpoint or logpoint. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#SourceBreakpoint_column = i32 ; # [doc = "The expression for conditional breakpoints.\nIt is only honored by a debug adapter if the corresponding capability `supportsConditionalBreakpoints` is true."] pub type r#SourceBreakpoint_condition = String ; # [doc = "The expression that controls how many hits of the breakpoint are ignored.\nThe debug adapter is expected to interpret the expression as needed.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportsHitConditionalBreakpoints` is true."] pub type r#SourceBreakpoint_hitCondition = String ; # [doc = "If this attribute exists and is non-empty, the debug adapter must not 'break' (stop)\nbut log the message instead. Expressions within `{}` are interpolated.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportsLogPoints` is true."] pub type r#SourceBreakpoint_logMessage = String ; pub struct r#SourceBreakpoint { pub r#line : r#SourceBreakpoint_line , r#column : r#SourceBreakpoint_column , r#condition : r#SourceBreakpoint_condition , r#hitCondition : r#SourceBreakpoint_hitCondition , r#logMessage : r#SourceBreakpoint_logMessage } # [doc = "Properties of a breakpoint passed to the `setFunctionBreakpoints` request."] # [doc = "The name of the function."] pub type r#FunctionBreakpoint_name = String ; # [doc = "An expression for conditional breakpoints.\nIt is only honored by a debug adapter if the corresponding capability `supportsConditionalBreakpoints` is true."] pub type r#FunctionBreakpoint_condition = String ; # [doc = "An expression that controls how many hits of the breakpoint are ignored.\nThe debug adapter is expected to interpret the expression as needed.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportsHitConditionalBreakpoints` is true."] pub type r#FunctionBreakpoint_hitCondition = String ; pub struct r#FunctionBreakpoint { pub r#name : r#FunctionBreakpoint_name , r#condition : r#FunctionBreakpoint_condition , r#hitCondition : r#FunctionBreakpoint_hitCondition } # [doc = "This enumeration defines all possible access types for data breakpoints."] pub type r#DataBreakpointAccessType = String ; # [doc = "Properties of a data breakpoint passed to the `setDataBreakpoints` request."] # [doc = "An id representing the data. This id is returned from the `dataBreakpointInfo` request."] pub type r#DataBreakpoint_dataId = String ; # [doc = "The access type of the data."] pub type r#DataBreakpoint_accessType = r#DataBreakpointAccessType ; # [doc = "An expression for conditional breakpoints."] pub type r#DataBreakpoint_condition = String ; # [doc = "An expression that controls how many hits of the breakpoint are ignored.\nThe debug adapter is expected to interpret the expression as needed."] pub type r#DataBreakpoint_hitCondition = String ; pub struct r#DataBreakpoint { pub r#dataId : r#DataBreakpoint_dataId , r#accessType : r#DataBreakpoint_accessType , r#condition : r#DataBreakpoint_condition , r#hitCondition : r#DataBreakpoint_hitCondition } # [doc = "Properties of a breakpoint passed to the `setInstructionBreakpoints` request"] # [doc = "The instruction reference of the breakpoint.\nThis should be a memory or instruction pointer reference from an `EvaluateResponse`, `Variable`, `StackFrame`, `GotoTarget`, or `Breakpoint`."] pub type r#InstructionBreakpoint_instructionReference = String ; # [doc = "The offset from the instruction reference.\nThis can be negative."] pub type r#InstructionBreakpoint_offset = i32 ; # [doc = "An expression for conditional breakpoints.\nIt is only honored by a debug adapter if the corresponding capability `supportsConditionalBreakpoints` is true."] pub type r#InstructionBreakpoint_condition = String ; # [doc = "An expression that controls how many hits of the breakpoint are ignored.\nThe debug adapter is expected to interpret the expression as needed.\nThe attribute is only honored by a debug adapter if the corresponding capability `supportsHitConditionalBreakpoints` is true."] pub type r#InstructionBreakpoint_hitCondition = String ; pub struct r#InstructionBreakpoint { pub r#instructionReference : r#InstructionBreakpoint_instructionReference , r#offset : r#InstructionBreakpoint_offset , r#condition : r#InstructionBreakpoint_condition , r#hitCondition : r#InstructionBreakpoint_hitCondition } # [doc = "Information about a breakpoint created in `setBreakpoints`, `setFunctionBreakpoints`, `setInstructionBreakpoints`, or `setDataBreakpoints` requests."] # [doc = "The identifier for the breakpoint. It is needed if breakpoint events are used to update or remove breakpoints."] pub type r#Breakpoint_id = i32 ; # [doc = "If true, the breakpoint could be set (but not necessarily at the desired location)."] pub type r#Breakpoint_verified = bool ; # [doc = "A message about the state of the breakpoint.\nThis is shown to the user and can be used to explain why a breakpoint could not be verified."] pub type r#Breakpoint_message = String ; # [doc = "The source where the breakpoint is located."] pub type r#Breakpoint_source = r#Source ; # [doc = "The start line of the actual range covered by the breakpoint."] pub type r#Breakpoint_line = i32 ; # [doc = "Start position of the source range covered by the breakpoint. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#Breakpoint_column = i32 ; # [doc = "The end line of the actual range covered by the breakpoint."] pub type r#Breakpoint_endLine = i32 ; # [doc = "End position of the source range covered by the breakpoint. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based.\nIf no end line is given, then the end column is assumed to be in the start line."] pub type r#Breakpoint_endColumn = i32 ; # [doc = "A memory reference to where the breakpoint is set."] pub type r#Breakpoint_instructionReference = String ; # [doc = "The offset from the instruction reference.\nThis can be negative."] pub type r#Breakpoint_offset = i32 ; pub struct r#Breakpoint { pub r#id : r#Breakpoint_id , r#verified : r#Breakpoint_verified , r#message : r#Breakpoint_message , r#source : r#Breakpoint_source , r#line : r#Breakpoint_line , r#column : r#Breakpoint_column , r#endLine : r#Breakpoint_endLine , r#endColumn : r#Breakpoint_endColumn , r#instructionReference : r#Breakpoint_instructionReference , r#offset : r#Breakpoint_offset } # [doc = "The granularity of one 'step' in the stepping requests `next`, `stepIn`, `stepOut`, and `stepBack`."] pub type r#SteppingGranularity = String ; # [doc = "A `StepInTarget` can be used in the `stepIn` request and determines into which single target the `stepIn` request should step."] # [doc = "Unique identifier for a step-in target."] pub type r#StepInTarget_id = i32 ; # [doc = "The name of the step-in target (shown in the UI)."] pub type r#StepInTarget_label = String ; # [doc = "The line of the step-in target."] pub type r#StepInTarget_line = i32 ; # [doc = "Start position of the range covered by the step in target. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#StepInTarget_column = i32 ; # [doc = "The end line of the range covered by the step-in target."] pub type r#StepInTarget_endLine = i32 ; # [doc = "End position of the range covered by the step in target. It is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based."] pub type r#StepInTarget_endColumn = i32 ; pub struct r#StepInTarget { pub r#id : r#StepInTarget_id , r#label : r#StepInTarget_label , r#line : r#StepInTarget_line , r#column : r#StepInTarget_column , r#endLine : r#StepInTarget_endLine , r#endColumn : r#StepInTarget_endColumn } # [doc = "A `GotoTarget` describes a code location that can be used as a target in the `goto` request.\nThe possible goto targets can be determined via the `gotoTargets` request."] # [doc = "Unique identifier for a goto target. This is used in the `goto` request."] pub type r#GotoTarget_id = i32 ; # [doc = "The name of the goto target (shown in the UI)."] pub type r#GotoTarget_label = String ; # [doc = "The line of the goto target."] pub type r#GotoTarget_line = i32 ; # [doc = "The column of the goto target."] pub type r#GotoTarget_column = i32 ; # [doc = "The end line of the range covered by the goto target."] pub type r#GotoTarget_endLine = i32 ; # [doc = "The end column of the range covered by the goto target."] pub type r#GotoTarget_endColumn = i32 ; # [doc = "A memory reference for the instruction pointer value represented by this target."] pub type r#GotoTarget_instructionPointerReference = String ; pub struct r#GotoTarget { pub r#id : r#GotoTarget_id , r#label : r#GotoTarget_label , r#line : r#GotoTarget_line , r#column : r#GotoTarget_column , r#endLine : r#GotoTarget_endLine , r#endColumn : r#GotoTarget_endColumn , r#instructionPointerReference : r#GotoTarget_instructionPointerReference } # [doc = "`CompletionItems` are the suggestions returned from the `completions` request."] # [doc = "The label of this completion item. By default this is also the text that is inserted when selecting this completion."] pub type r#CompletionItem_label = String ; # [doc = "If text is returned and not an empty string, then it is inserted instead of the label."] pub type r#CompletionItem_text = String ; # [doc = "A string that should be used when comparing this item with other items. If not returned or an empty string, the `label` is used instead."] pub type r#CompletionItem_sortText = String ; # [doc = "A human-readable string with additional information about this item, like type or symbol information."] pub type r#CompletionItem_detail = String ; # [doc = "The item's type. Typically the client uses this information to render the item in the UI with an icon."] pub type r#CompletionItem_type = r#CompletionItemType ; # [doc = "Start position (within the `text` attribute of the `completions` request) where the completion text is added. The position is measured in UTF-16 code units and the client capability `columnsStartAt1` determines whether it is 0- or 1-based. If the start position is omitted the text is added at the location specified by the `column` attribute of the `completions` request."] pub type r#CompletionItem_start = i32 ; # [doc = "Length determines how many characters are overwritten by the completion text and it is measured in UTF-16 code units. If missing the value 0 is assumed which results in the completion text being inserted."] pub type r#CompletionItem_length = i32 ; # [doc = "Determines the start of the new selection after the text has been inserted (or replaced). `selectionStart` is measured in UTF-16 code units and must be in the range 0 and length of the completion text. If omitted the selection starts at the end of the completion text."] pub type r#CompletionItem_selectionStart = i32 ; # [doc = "Determines the length of the new selection after the text has been inserted (or replaced) and it is measured in UTF-16 code units. The selection can not extend beyond the bounds of the completion text. If omitted the length is assumed to be 0."] pub type r#CompletionItem_selectionLength = i32 ; pub struct r#CompletionItem { pub r#label : r#CompletionItem_label , r#text : r#CompletionItem_text , r#sortText : r#CompletionItem_sortText , r#detail : r#CompletionItem_detail , r#type : r#CompletionItem_type , r#start : r#CompletionItem_start , r#length : r#CompletionItem_length , r#selectionStart : r#CompletionItem_selectionStart , r#selectionLength : r#CompletionItem_selectionLength } # [doc = "Some predefined types for the CompletionItem. Please note that not all clients have specific icons for all of them."] pub type r#CompletionItemType = String ; # [doc = "Names of checksum algorithms that may be supported by a debug adapter."] pub type r#ChecksumAlgorithm = String ; # [doc = "The checksum of an item calculated by the specified algorithm."] # [doc = "The algorithm used to calculate this checksum."] pub type r#Checksum_algorithm = r#ChecksumAlgorithm ; # [doc = "Value of the checksum, encoded as a hexadecimal value."] pub type r#Checksum_checksum = String ; pub struct r#Checksum { pub r#algorithm : r#Checksum_algorithm , r#checksum : r#Checksum_checksum } # [doc = "Provides formatting information for a value."] # [doc = "Display the value in hex."] pub type r#ValueFormat_hex = bool ; pub struct r#ValueFormat { pub r#hex : r#ValueFormat_hex } pub type r#StackFrameFormat_0 = r#ValueFormat ; # [doc = "Provides formatting information for a stack frame."] # [doc = "Displays parameters for the stack frame."] pub type r#StackFrameFormat_1_parameters = bool ; # [doc = "Displays the types of parameters for the stack frame."] pub type r#StackFrameFormat_1_parameterTypes = bool ; # [doc = "Displays the names of parameters for the stack frame."] pub type r#StackFrameFormat_1_parameterNames = bool ; # [doc = "Displays the values of parameters for the stack frame."] pub type r#StackFrameFormat_1_parameterValues = bool ; # [doc = "Displays the line number of the stack frame."] pub type r#StackFrameFormat_1_line = bool ; # [doc = "Displays the module of the stack frame."] pub type r#StackFrameFormat_1_module = bool ; # [doc = "Includes all stack frames, including those the debug adapter might otherwise hide."] pub type r#StackFrameFormat_1_includeAll = bool ; pub struct r#StackFrameFormat_1 { pub r#parameters : r#StackFrameFormat_1_parameters , r#parameterTypes : r#StackFrameFormat_1_parameterTypes , r#parameterNames : r#StackFrameFormat_1_parameterNames , r#parameterValues : r#StackFrameFormat_1_parameterValues , r#line : r#StackFrameFormat_1_line , r#module : r#StackFrameFormat_1_module , r#includeAll : r#StackFrameFormat_1_includeAll } pub struct r#StackFrameFormat { pub r#_0 : r#StackFrameFormat_0 , r#_1 : r#StackFrameFormat_1 } # [doc = "An `ExceptionFilterOptions` is used to specify an exception filter together with a condition for the `setExceptionBreakpoints` request."] # [doc = "ID of an exception filter returned by the `exceptionBreakpointFilters` capability."] pub type r#ExceptionFilterOptions_filterId = String ; # [doc = "An expression for conditional exceptions.\nThe exception breaks into the debugger if the result of the condition is true."] pub type r#ExceptionFilterOptions_condition = String ; pub struct r#ExceptionFilterOptions { pub r#filterId : r#ExceptionFilterOptions_filterId , r#condition : r#ExceptionFilterOptions_condition } # [doc = "An `ExceptionOptions` assigns configuration options to a set of exceptions."] # [doc = "A path that selects a single or multiple exceptions in a tree. If `path` is missing, the whole tree is selected.\nBy convention the first segment of the path is a category that is used to group exceptions in the UI."] pub type r#ExceptionOptions_path_array = r#ExceptionPathSegment ; pub type r#ExceptionOptions_path = Vec < r#ExceptionOptions_path_array > ; # [doc = "Condition when a thrown exception should result in a break."] pub type r#ExceptionOptions_breakMode = r#ExceptionBreakMode ; pub struct r#ExceptionOptions { pub r#path : r#ExceptionOptions_path , r#breakMode : r#ExceptionOptions_breakMode } # [doc = "This enumeration defines all possible conditions when a thrown exception should result in a break.\nnever: never breaks,\nalways: always breaks,\nunhandled: breaks when exception unhandled,\nuserUnhandled: breaks if the exception is not handled by user code."] pub type r#ExceptionBreakMode = String ; # [doc = "An `ExceptionPathSegment` represents a segment in a path that is used to match leafs or nodes in a tree of exceptions.\nIf a segment consists of more than one name, it matches the names provided if `negate` is false or missing, or it matches anything except the names provided if `negate` is true."] # [doc = "If false or missing this segment matches the names provided, otherwise it matches anything except the names provided."] pub type r#ExceptionPathSegment_negate = bool ; # [doc = "Depending on the value of `negate` the names that should match or not match."] pub type r#ExceptionPathSegment_names_array = String ; pub type r#ExceptionPathSegment_names = Vec < r#ExceptionPathSegment_names_array > ; pub struct r#ExceptionPathSegment { pub r#negate : r#ExceptionPathSegment_negate , r#names : r#ExceptionPathSegment_names } # [doc = "Detailed information about an exception that has occurred."] # [doc = "Message contained in the exception."] pub type r#ExceptionDetails_message = String ; # [doc = "Short type name of the exception object."] pub type r#ExceptionDetails_typeName = String ; # [doc = "Fully-qualified type name of the exception object."] pub type r#ExceptionDetails_fullTypeName = String ; # [doc = "An expression that can be evaluated in the current scope to obtain the exception object."] pub type r#ExceptionDetails_evaluateName = String ; # [doc = "Stack trace at the time the exception was thrown."] pub type r#ExceptionDetails_stackTrace = String ; # [doc = "Details of the exception contained by this exception, if any."] pub type r#ExceptionDetails_innerException_array = r#ExceptionDetails ; pub type r#ExceptionDetails_innerException = Vec < r#ExceptionDetails_innerException_array > ; pub struct r#ExceptionDetails { pub r#message : r#ExceptionDetails_message , r#typeName : r#ExceptionDetails_typeName , r#fullTypeName : r#ExceptionDetails_fullTypeName , r#evaluateName : r#ExceptionDetails_evaluateName , r#stackTrace : r#ExceptionDetails_stackTrace , r#innerException : r#ExceptionDetails_innerException } # [doc = "Represents a single disassembled instruction."] # [doc = "The address of the instruction. Treated as a hex value if prefixed with `0x`, or as a decimal value otherwise."] pub type r#DisassembledInstruction_address = String ; # [doc = "Raw bytes representing the instruction and its operands, in an implementation-defined format."] pub type r#DisassembledInstruction_instructionBytes = String ; # [doc = "Text representing the instruction and its operands, in an implementation-defined format."] pub type r#DisassembledInstruction_instruction = String ; # [doc = "Name of the symbol that corresponds with the location of this instruction, if any."] pub type r#DisassembledInstruction_symbol = String ; # [doc = "Source location that corresponds to this instruction, if any.\nShould always be set (if available) on the first instruction returned,\nbut can be omitted afterwards if this instruction maps to the same source file as the previous instruction."] pub type r#DisassembledInstruction_location = r#Source ; # [doc = "The line within the source location that corresponds to this instruction, if any."] pub type r#DisassembledInstruction_line = i32 ; # [doc = "The column within the line that corresponds to this instruction, if any."] pub type r#DisassembledInstruction_column = i32 ; # [doc = "The end line of the range that corresponds to this instruction, if any."] pub type r#DisassembledInstruction_endLine = i32 ; # [doc = "The end column of the range that corresponds to this instruction, if any."] pub type r#DisassembledInstruction_endColumn = i32 ; pub struct r#DisassembledInstruction { pub r#address : r#DisassembledInstruction_address , r#instructionBytes : r#DisassembledInstruction_instructionBytes , r#instruction : r#DisassembledInstruction_instruction , r#symbol : r#DisassembledInstruction_symbol , r#location : r#DisassembledInstruction_location , r#line : r#DisassembledInstruction_line , r#column : r#DisassembledInstruction_column , r#endLine : r#DisassembledInstruction_endLine , r#endColumn : r#DisassembledInstruction_endColumn } # [doc = "Logical areas that can be invalidated by the `invalidated` event."] pub type r#InvalidatedAreas = String ;